/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/admin/backups.json": {
    /** List backups */
    get: operations["getBackups"];
    /** Create backup */
    post: operations["createBackup"];
  };
  "/admin/backups/{filename}": {
    /** Download backup */
    get: operations["downloadBackup"];
    /** Send download backup email */
    put: operations["sendDownloadBackupEmail"];
  };
  "/admin/badges.json": {
    /** List badges */
    get: operations["adminListBadges"];
    /** Create badge */
    post: operations["createBadge"];
  };
  "/admin/badges/{id}.json": {
    /** Update badge */
    put: operations["updateBadge"];
    /** Delete badge */
    delete: operations["deleteBadge"];
  };
  "/categories.json": {
    /** Retrieves a list of categories */
    get: operations["listCategories"];
    /** Creates a category */
    post: operations["createCategory"];
  };
  "/categories/{id}.json": {
    /** Updates a category */
    put: operations["updateCategory"];
  };
  "/c/{slug}/{id}.json": {
    /** List topics */
    get: operations["listCategoryTopics"];
  };
  "/c/{id}/show.json": {
    /** Show category */
    get: operations["getCategory"];
  };
  "/admin/groups.json": {
    /** Create a group */
    post: operations["createGroup"];
  };
  "/admin/groups/{id}.json": {
    /** Delete a group */
    delete: operations["deleteGroup"];
  };
  "/groups/{id}.json": {
    /** Get a group */
    get: operations["getGroup"];
    /** Update a group */
    put: operations["updateGroup"];
  };
  "/groups/{id}/members.json": {
    /** List group members */
    get: operations["listGroupMembers"];
    /** Add group members */
    put: operations["addGroupMembers"];
    /** Remove group members */
    delete: operations["removeGroupMembers"];
  };
  "/groups.json": {
    /** List groups */
    get: operations["listGroups"];
  };
  "/invites.json": {
    /** Create an invite */
    post: operations["createInvite"];
  };
  "/invites/create-multiple.json": {
    /** Create multiple invites */
    post: operations["createMultipleInvites"];
  };
  "/notifications.json": {
    /** Get the notifications that belong to the current user */
    get: operations["getNotifications"];
  };
  "/notifications/mark-read.json": {
    /** Mark notifications as read */
    put: operations["markNotificationsAsRead"];
  };
  "/posts.json": {
    /** List latest posts across topics */
    get: operations["listPosts"];
    /** Creates a new topic, a new post, or a private message */
    post: operations["createTopicPostPM"];
  };
  "/posts/{id}.json": {
    /**
     * Retrieve a single post
     * @description This endpoint can be used to get the number of likes on a post using the
     * `actions_summary` property in the response. `actions_summary` responses
     * with the id of `2` signify a `like`. If there are no `actions_summary`
     * items with the id of `2`, that means there are 0 likes. Other ids likely
     * refer to various different flag types.
     */
    get: operations["getPost"];
    /** Update a single post */
    put: operations["updatePost"];
    /** delete a single post */
    delete: operations["deletePost"];
  };
  "/posts/{id}/replies.json": {
    /** List replies to a post */
    get: operations["postReplies"];
  };
  "/posts/{id}/locked.json": {
    /** Lock a post from being edited */
    put: operations["lockPost"];
  };
  "/post_actions.json": {
    /** Like a post and other actions */
    post: operations["performPostAction"];
  };
  "/topics/private-messages/{username}.json": {
    /** Get a list of private messages for a user */
    get: operations["listUserPrivateMessages"];
  };
  "/topics/private-messages-sent/{username}.json": {
    /** Get a list of private messages sent for a user */
    get: operations["getUserSentPrivateMessages"];
  };
  "/search.json": {
    /** Search for a term */
    get: operations["search"];
  };
  "/site.json": {
    /**
     * Get site info
     * @description Can be used to fetch all categories and subcategories
     */
    get: operations["getSite"];
  };
  "/site/basic-info.json": {
    /**
     * Get site basic info
     * @description Can be used to fetch basic info about a site
     */
    get: operations["getSiteBasicInfo"];
  };
  "/tag_groups.json": {
    /** Get a list of tag groups */
    get: operations["listTagGroups"];
    /** Creates a tag group */
    post: operations["createTagGroup"];
  };
  "/tag_groups/{id}.json": {
    /** Get a single tag group */
    get: operations["getTagGroup"];
    /** Update tag group */
    put: operations["updateTagGroup"];
  };
  "/tags.json": {
    /** Get a list of tags */
    get: operations["listTags"];
  };
  "/tag/{name}.json": {
    /** Get a specific tag */
    get: operations["getTag"];
  };
  "/t/{id}/posts.json": {
    /** Get specific posts from a topic */
    get: operations["getSpecificPostsFromTopic"];
  };
  "/t/{id}.json": {
    /** Get a single topic */
    get: operations["getTopic"];
    /** Remove a topic */
    delete: operations["removeTopic"];
  };
  "/t/-/{id}.json": {
    /** Update a topic */
    put: operations["updateTopic"];
  };
  "/t/{id}/invite.json": {
    /** Invite to topic */
    post: operations["inviteToTopic"];
  };
  "/t/{id}/bookmark.json": {
    /** Bookmark topic */
    put: operations["bookmarkTopic"];
  };
  "/t/{id}/status.json": {
    /** Update the status of a topic */
    put: operations["updateTopicStatus"];
  };
  "/latest.json": {
    /** Get the latest topics */
    get: operations["listLatestTopics"];
  };
  "/top.json": {
    /** Get the top topics filtered by period */
    get: operations["listTopTopics"];
  };
  "/t/{id}/notifications.json": {
    /** Set notification level */
    post: operations["setNotificationLevel"];
  };
  "/t/{id}/change-timestamp.json": {
    /** Update topic timestamp */
    put: operations["updateTopicTimestamp"];
  };
  "/t/{id}/timer.json": {
    /** Create topic timer */
    post: operations["createTopicTimer"];
  };
  "/t/external_id/{external_id}.json": {
    /** Get topic by external_id */
    get: operations["getTopicByExternalId"];
  };
  "/uploads.json": {
    /** Creates an upload */
    post: operations["createUpload"];
  };
  "/uploads/generate-presigned-put.json": {
    /**
     * Initiates a direct external upload
     * @description Direct external uploads bypass the usual method of creating uploads
     * via the POST /uploads route, and upload directly to an external provider,
     * which by default is S3. This route begins the process, and will return
     * a unique identifier for the external upload as well as a presigned URL
     * which is where the file binary blob should be uploaded to.
     *
     * Once the upload is complete to the external service, you must call the
     * POST /complete-external-upload route using the unique identifier returned
     * by this route, which will create any required Upload record in the Discourse
     * database and also move file from its temporary location to the final
     * destination in the external storage service.
     *
     * You must have the correct permissions and CORS settings configured in your
     * external provider. We support AWS S3 as the default. See:
     *
     * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
     *
     * An external file store must be set up and `enable_direct_s3_uploads` must
     * be set to true for this endpoint to function.
     */
    post: operations["generatePresignedPut"];
  };
  "/uploads/complete-external-upload.json": {
    /**
     * Completes a direct external upload
     * @description Completes an external upload initialized with /get-presigned-put. The
     * file will be moved from its temporary location in external storage to
     * a final destination in the S3 bucket. An Upload record will also be
     * created in the database in most cases.
     *
     * If a sha1-checksum was provided in the initial request it will also
     * be compared with the uploaded file in storage to make sure the same
     * file was uploaded. The file size will be compared for the same reason.
     *
     * You must have the correct permissions and CORS settings configured in your
     * external provider. We support AWS S3 as the default. See:
     *
     * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
     *
     * An external file store must be set up and `enable_direct_s3_uploads` must
     * be set to true for this endpoint to function.
     */
    post: operations["completeExternalUpload"];
  };
  "/uploads/create-multipart.json": {
    /**
     * Creates a multipart external upload
     * @description Creates a multipart upload in the external storage provider, storing
     * a temporary reference to the external upload similar to /get-presigned-put.
     *
     * You must have the correct permissions and CORS settings configured in your
     * external provider. We support AWS S3 as the default. See:
     *
     * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
     *
     * An external file store must be set up and `enable_direct_s3_uploads` must
     * be set to true for this endpoint to function.
     */
    post: operations["createMultipartUpload"];
  };
  "/uploads/batch-presign-multipart-parts.json": {
    /**
     * Generates batches of presigned URLs for multipart parts
     * @description Multipart uploads are uploaded in chunks or parts to individual presigned
     * URLs, similar to the one generated by /generate-presigned-put. The part
     * numbers provided must be between 1 and 10000. The total number of parts
     * will depend on the chunk size in bytes that you intend to use to upload
     * each chunk. For example a 12MB file may have 2 5MB chunks and a final
     * 2MB chunk, for part numbers 1, 2, and 3.
     *
     * This endpoint will return a presigned URL for each part number provided,
     * which you can then use to send PUT requests for the binary chunk corresponding
     * to that part. When the part is uploaded, the provider should return an
     * ETag for the part, and this should be stored along with the part number,
     * because this is needed to complete the multipart upload.
     *
     * You must have the correct permissions and CORS settings configured in your
     * external provider. We support AWS S3 as the default. See:
     *
     * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
     *
     * An external file store must be set up and `enable_direct_s3_uploads` must
     * be set to true for this endpoint to function.
     */
    post: operations["batchPresignMultipartParts"];
  };
  "/uploads/abort-multipart.json": {
    /**
     * Abort multipart upload
     * @description This endpoint aborts the multipart upload initiated with /create-multipart.
     * This should be used when cancelling the upload. It does not matter if parts
     * were already uploaded into the external storage provider.
     *
     * You must have the correct permissions and CORS settings configured in your
     * external provider. We support AWS S3 as the default. See:
     *
     * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
     *
     * An external file store must be set up and `enable_direct_s3_uploads` must
     * be set to true for this endpoint to function.
     */
    post: operations["abortMultipart"];
  };
  "/uploads/complete-multipart.json": {
    /**
     * Complete multipart upload
     * @description Completes the multipart upload in the external store, and copies the
     * file from its temporary location to its final location in the store.
     * All of the parts must have been uploaded to the external storage provider.
     * An Upload record will be completed in most cases once the file is copied
     * to its final location.
     *
     * You must have the correct permissions and CORS settings configured in your
     * external provider. We support AWS S3 as the default. See:
     *
     * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
     *
     * An external file store must be set up and `enable_direct_s3_uploads` must
     * be set to true for this endpoint to function.
     */
    post: operations["completeMultipart"];
  };
  "/user-badges/{username}.json": {
    /** List badges for a user */
    get: operations["listUserBadges"];
  };
  "/users.json": {
    /** Creates a user */
    post: operations["createUser"];
  };
  "/u/{username}.json": {
    /** Get a single user by username */
    get: operations["getUser"];
    /** Update a user */
    put: operations["updateUser"];
  };
  "/u/by-external/{external_id}.json": {
    /** Get a user by external_id */
    get: operations["getUserExternalId"];
  };
  "/u/by-external/{provider}/{external_id}.json": {
    /** Get a user by identity provider external ID */
    get: operations["getUserIdentiyProviderExternalId"];
  };
  "/u/{username}/preferences/avatar/pick.json": {
    /** Update avatar */
    put: operations["updateAvatar"];
  };
  "/u/{username}/preferences/email.json": {
    /** Update email */
    put: operations["updateEmail"];
  };
  "/u/{username}/preferences/username.json": {
    /** Update username */
    put: operations["updateUsername"];
  };
  "/directory_items.json": {
    /** Get a public list of users */
    get: operations["listUsersPublic"];
  };
  "/admin/users/{id}.json": {
    /** Get a user by id */
    get: operations["adminGetUser"];
    /** Delete a user */
    delete: operations["deleteUser"];
  };
  "/admin/users/{id}/activate.json": {
    /** Activate a user */
    put: operations["activateUser"];
  };
  "/admin/users/{id}/deactivate.json": {
    /** Deactivate a user */
    put: operations["deactivateUser"];
  };
  "/admin/users/{id}/suspend.json": {
    /** Suspend a user */
    put: operations["suspendUser"];
  };
  "/admin/users/{id}/silence.json": {
    /** Silence a user */
    put: operations["silenceUser"];
  };
  "/admin/users/{id}/anonymize.json": {
    /** Anonymize a user */
    put: operations["anonymizeUser"];
  };
  "/admin/users/{id}/log_out.json": {
    /** Log a user out */
    post: operations["logOutUser"];
  };
  "/user_avatar/{username}/refresh_gravatar.json": {
    /** Refresh gravatar */
    post: operations["refreshGravatar"];
  };
  "/admin/users/list/{flag}.json": {
    /** Get a list of users */
    get: operations["adminListUsers"];
  };
  "/user_actions.json": {
    /** Get a list of user actions */
    get: operations["listUserActions"];
  };
  "/session/forgot_password.json": {
    /** Send password reset email */
    post: operations["sendPasswordResetEmail"];
  };
  "/users/password-reset/{token}.json": {
    /** Change password */
    put: operations["changePassword"];
  };
  "/u/{username}/emails.json": {
    /** Get email addresses belonging to a user */
    get: operations["getUserEmails"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type external = Record<string, never>;

export interface operations {

  /** List backups */
  getBackups: {
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
              filename: string;
              size: number;
              last_modified: string;
            }[];
        };
      };
    };
  };
  /** Create backup */
  createBackup: {
    requestBody?: {
      content: {
        "application/json": {
          with_uploads: boolean;
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success: string;
          };
        };
      };
    };
  };
  /** Download backup */
  downloadBackup: {
    parameters: {
      query: {
        token: string;
      };
      path: {
        filename: string;
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: never;
      };
    };
  };
  /** Send download backup email */
  sendDownloadBackupEmail: {
    parameters: {
      path: {
        filename: string;
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: never;
      };
    };
  };
  /** List badges */
  adminListBadges: {
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            badges: ({
                id: number;
                name: string;
                description: string;
                grant_count: number;
                allow_title: boolean;
                multiple_grant: boolean;
                icon: string;
                image_url: string | null;
                listable: boolean;
                enabled: boolean;
                badge_grouping_id: number;
                system: boolean;
                long_description: string;
                slug: string;
                manually_grantable: boolean;
                query: string | null;
                trigger: number | null;
                target_posts: boolean;
                auto_revoke: boolean;
                show_posts: boolean;
                i18n_name?: string | null;
                image_upload_id: number | null;
                badge_type_id: number;
              })[];
            badge_types: {
                id: number;
                name: string;
                sort_order: number;
              }[];
            badge_groupings: ({
                id: number;
                name: string;
                description: string | null;
                position: number;
                system: boolean;
              })[];
            admin_badges: {
              protected_system_fields: unknown[];
              triggers: {
                user_change: number;
                none: number;
                post_revision: number;
                trust_level_change: number;
                post_action: number;
              };
              badge_ids: unknown[];
              badge_grouping_ids: unknown[];
              badge_type_ids: unknown[];
            };
          };
        };
      };
    };
  };
  /** Create badge */
  createBadge: {
    requestBody?: {
      content: {
        "application/json": {
          /** @description The name for the new badge. */
          name: string;
          /**
           * @description The ID for the badge type. 1 for Gold, 2 for Silver,
           * 3 for Bronze.
           */
          badge_type_id: number;
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            badge_types: {
                id: number;
                name: string;
                sort_order: number;
              }[];
            badge: {
              id: number;
              name: string;
              description: string;
              grant_count: number;
              allow_title: boolean;
              multiple_grant: boolean;
              icon: string;
              image_url: string | null;
              image_upload_id: number | null;
              listable: boolean;
              enabled: boolean;
              badge_grouping_id: number;
              system: boolean;
              long_description: string;
              slug: string;
              manually_grantable: boolean;
              query: string | null;
              trigger: string | null;
              target_posts: boolean;
              auto_revoke: boolean;
              show_posts: boolean;
              badge_type_id: number;
            };
          };
        };
      };
    };
  };
  /** Update badge */
  updateBadge: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @description The name for the new badge. */
          name: string;
          /**
           * @description The ID for the badge type. 1 for Gold, 2 for Silver,
           * 3 for Bronze.
           */
          badge_type_id: number;
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            badge_types: {
                id: number;
                name: string;
                sort_order: number;
              }[];
            badge: {
              id: number;
              name: string;
              description: string;
              grant_count: number;
              allow_title: boolean;
              multiple_grant: boolean;
              icon: string;
              image_url: string | null;
              image_upload_id: number | null;
              listable: boolean;
              enabled: boolean;
              badge_grouping_id: number;
              system: boolean;
              long_description: string;
              slug: string;
              manually_grantable: boolean;
              query: string | null;
              trigger: string | null;
              target_posts: boolean;
              auto_revoke: boolean;
              show_posts: boolean;
              badge_type_id: number;
            };
          };
        };
      };
    };
  };
  /** Delete badge */
  deleteBadge: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: never;
      };
    };
  };
  /** Retrieves a list of categories */
  listCategories: {
    parameters: {
      query?: {
        include_subcategories?: true;
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            category_list: {
              can_create_category: boolean;
              can_create_topic: boolean;
              categories: ({
                  id: number;
                  name: string;
                  color: string;
                  text_color: string;
                  slug: string;
                  topic_count: number;
                  post_count: number;
                  position: number;
                  description: string | null;
                  description_text: string | null;
                  description_excerpt: string | null;
                  topic_url: string | null;
                  read_restricted: boolean;
                  permission: number;
                  notification_level: number;
                  can_edit: boolean;
                  topic_template: string | null;
                  has_children: boolean;
                  subcategory_count: number | null;
                  sort_order: string | null;
                  sort_ascending: string | null;
                  show_subcategory_list: boolean;
                  num_featured_topics: number;
                  default_view: string | null;
                  subcategory_list_style: string;
                  default_top_period: string;
                  default_list_filter: string;
                  minimum_required_tags: number;
                  navigate_to_first_post_after_read: boolean;
                  topics_day: number;
                  topics_week: number;
                  topics_month: number;
                  topics_year: number;
                  topics_all_time: number;
                  is_uncategorized?: boolean;
                  subcategory_ids: unknown[];
                  subcategory_list?: unknown[] | null;
                  uploaded_logo: string | null;
                  uploaded_logo_dark: string | null;
                  uploaded_background: string | null;
                  uploaded_background_dark: string | null;
                })[];
            };
          };
        };
      };
    };
  };
  /** Creates a category */
  createCategory: {
    requestBody?: {
      content: {
        "application/json": {
          name: string;
          /** @example 49d9e9 */
          color?: string;
          /** @example f0fcfd */
          text_color?: string;
          parent_category_id?: number;
          allow_badges?: boolean;
          slug?: string;
          topic_featured_links_allowed?: boolean;
          permissions?: {
            /** @example 1 */
            everyone?: number;
            staff?: number;
            [key: string]: unknown;
          };
          search_priority?: number;
          form_template_ids?: unknown[];
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            category: {
              id: number;
              name: string;
              color: string;
              text_color: string;
              slug: string;
              topic_count: number;
              post_count: number;
              position: number;
              description: string | null;
              description_text: string | null;
              description_excerpt: string | null;
              topic_url: string | null;
              read_restricted: boolean;
              permission: number | null;
              notification_level: number;
              can_edit: boolean;
              topic_template: string | null;
              form_template_ids?: unknown[];
              has_children: boolean | null;
              subcategory_count: number | null;
              sort_order: string | null;
              sort_ascending: string | null;
              show_subcategory_list: boolean;
              num_featured_topics: number;
              default_view: string | null;
              subcategory_list_style: string;
              default_top_period: string;
              default_list_filter: string;
              minimum_required_tags: number;
              navigate_to_first_post_after_read: boolean;
              custom_fields: Record<string, never>;
              allowed_tags?: unknown[];
              allowed_tag_groups?: unknown[];
              allow_global_tags?: boolean;
              required_tag_groups: {
                  name: string;
                  min_count: number;
                }[];
              category_setting?: unknown;
              read_only_banner: string | null;
              available_groups: unknown[];
              auto_close_hours: string | null;
              auto_close_based_on_last_post: boolean;
              allow_unlimited_owner_edits_on_first_post: boolean;
              default_slow_mode_seconds: string | null;
              group_permissions: {
                  permission_type: number;
                  group_name: string;
                }[];
              email_in: string | null;
              email_in_allow_strangers: boolean;
              mailinglist_mirror: boolean;
              all_topics_wiki: boolean;
              can_delete: boolean;
              allow_badges: boolean;
              topic_featured_link_allowed: boolean;
              search_priority: number;
              uploaded_logo: string | null;
              uploaded_logo_dark: string | null;
              uploaded_background: string | null;
              uploaded_background_dark: string | null;
            };
          };
        };
      };
    };
  };
  /** Updates a category */
  updateCategory: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          name: string;
          /** @example 49d9e9 */
          color?: string;
          /** @example f0fcfd */
          text_color?: string;
          parent_category_id?: number;
          allow_badges?: boolean;
          slug?: string;
          topic_featured_links_allowed?: boolean;
          permissions?: {
            /** @example 1 */
            everyone?: number;
            staff?: number;
            [key: string]: unknown;
          };
          search_priority?: number;
          form_template_ids?: unknown[];
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            success: string;
            category: {
              id: number;
              name: string;
              color: string;
              text_color: string;
              slug: string;
              topic_count: number;
              post_count: number;
              position: number;
              description: string | null;
              description_text: string | null;
              description_excerpt: string | null;
              topic_url: string | null;
              read_restricted: boolean;
              permission: number | null;
              notification_level: number;
              can_edit: boolean;
              topic_template: string | null;
              form_template_ids: unknown[];
              has_children: boolean | null;
              subcategory_count: number | null;
              sort_order: string | null;
              sort_ascending: string | null;
              show_subcategory_list: boolean;
              num_featured_topics: number;
              default_view: string | null;
              subcategory_list_style: string;
              default_top_period: string;
              default_list_filter: string;
              minimum_required_tags: number;
              navigate_to_first_post_after_read: boolean;
              custom_fields: Record<string, never>;
              allowed_tags?: unknown[];
              allowed_tag_groups?: unknown[];
              allow_global_tags?: boolean;
              required_tag_groups: {
                  name: string;
                  min_count: number;
                }[];
              category_setting?: unknown;
              read_only_banner: string | null;
              available_groups: unknown[];
              auto_close_hours: string | null;
              auto_close_based_on_last_post: boolean;
              allow_unlimited_owner_edits_on_first_post: boolean;
              default_slow_mode_seconds: string | null;
              group_permissions: {
                  permission_type: number;
                  group_name: string;
                }[];
              email_in: string | null;
              email_in_allow_strangers: boolean;
              mailinglist_mirror: boolean;
              all_topics_wiki: boolean;
              can_delete: boolean;
              allow_badges: boolean;
              topic_featured_link_allowed: boolean;
              search_priority: number;
              uploaded_logo: string | null;
              uploaded_logo_dark: string | null;
              uploaded_background: string | null;
              uploaded_background_dark: string | null;
            };
          };
        };
      };
    };
  };
  /** List topics */
  listCategoryTopics: {
    parameters: {
      path: {
        slug: string;
        id: number;
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            users?: {
                id: number;
                username: string;
                name: string;
                avatar_template: string;
              }[];
            primary_groups?: unknown[];
            topic_list: {
              can_create_topic: boolean;
              per_page: number;
              top_tags?: unknown[];
              topics: ({
                  id: number;
                  title: string;
                  fancy_title: string;
                  slug: string;
                  posts_count: number;
                  reply_count: number;
                  highest_post_number: number;
                  image_url: string | null;
                  created_at: string;
                  last_posted_at: string;
                  bumped: boolean;
                  bumped_at: string;
                  archetype: string;
                  unseen: boolean;
                  pinned: boolean;
                  unpinned: string | null;
                  excerpt: string;
                  visible: boolean;
                  closed: boolean;
                  archived: boolean;
                  bookmarked: string | null;
                  liked: string | null;
                  views: number;
                  like_count: number;
                  has_summary: boolean;
                  last_poster_username: string;
                  category_id: number;
                  pinned_globally: boolean;
                  featured_link: string | null;
                  posters: ({
                      extras: string;
                      description: string;
                      user_id: number;
                      primary_group_id: number | null;
                    })[];
                })[];
            };
          };
        };
      };
    };
  };
  /** Show category */
  getCategory: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            category: {
              id: number;
              name: string;
              color: string;
              text_color: string;
              slug: string;
              topic_count: number;
              post_count: number;
              position: number;
              description: string | null;
              description_text: string | null;
              description_excerpt: string | null;
              topic_url: string | null;
              read_restricted: boolean;
              permission: number | null;
              notification_level: number;
              can_edit: boolean;
              topic_template: string | null;
              form_template_ids?: unknown[];
              has_children: boolean | null;
              subcategory_count: number | null;
              sort_order: string | null;
              sort_ascending: string | null;
              show_subcategory_list: boolean;
              num_featured_topics: number;
              default_view: string | null;
              subcategory_list_style: string;
              default_top_period: string;
              default_list_filter: string;
              minimum_required_tags: number;
              navigate_to_first_post_after_read: boolean;
              custom_fields: Record<string, never>;
              allowed_tags?: unknown[];
              allowed_tag_groups?: unknown[];
              allow_global_tags?: boolean;
              required_tag_groups: {
                  name: string;
                  min_count: number;
                }[];
              category_setting?: unknown;
              read_only_banner: string | null;
              available_groups: unknown[];
              auto_close_hours: string | null;
              auto_close_based_on_last_post: boolean;
              allow_unlimited_owner_edits_on_first_post: boolean;
              default_slow_mode_seconds: string | null;
              group_permissions: {
                  permission_type: number;
                  group_name: string;
                }[];
              email_in: string | null;
              email_in_allow_strangers: boolean;
              mailinglist_mirror: boolean;
              all_topics_wiki: boolean;
              can_delete: boolean;
              allow_badges: boolean;
              topic_featured_link_allowed: boolean;
              search_priority: number;
              uploaded_logo: string | null;
              uploaded_logo_dark: string | null;
              uploaded_background: string | null;
              uploaded_background_dark: string | null;
            };
          };
        };
      };
    };
  };
  /** Create a group */
  createGroup: {
    requestBody?: {
      content: {
        "application/json": {
          group: {
            name: string;
            full_name?: string;
            /** @description About Group */
            bio_raw?: string;
            /** @description comma,separated */
            usernames?: string;
            /** @description comma,separated */
            owner_usernames?: string;
            /** @description pipe|separated */
            automatic_membership_email_domains?: string;
            visibility_level?: number;
            primary_group?: boolean;
            flair_icon?: string;
            flair_upload_id?: number;
            flair_bg_color?: string;
            public_admission?: boolean;
            public_exit?: boolean;
            default_notification_level?: number;
            muted_category_ids?: number[];
            regular_category_ids?: number[];
            watching_category_ids?: number[];
            tracking_category_ids?: number[];
            watching_first_post_category_ids?: number[];
          };
        };
      };
    };
    responses: {
      /** @description group created */
      200: {
        content: {
          "application/json": {
            basic_group: {
              id: number;
              automatic: boolean;
              name: string;
              user_count: number;
              mentionable_level: number;
              messageable_level: number;
              visibility_level: number;
              primary_group: boolean;
              title: string | null;
              grant_trust_level: string | null;
              incoming_email: string | null;
              has_messages: boolean;
              flair_url: string | null;
              flair_bg_color: string | null;
              flair_color: string | null;
              bio_raw: string | null;
              bio_cooked: string | null;
              bio_excerpt: string | null;
              public_admission: boolean;
              public_exit: boolean;
              allow_membership_requests: boolean;
              full_name: string | null;
              default_notification_level: number;
              membership_request_template: string | null;
              members_visibility_level: number;
              can_see_members: boolean;
              can_admin_group: boolean;
              can_edit_group?: boolean;
              publish_read_state: boolean;
            };
          };
        };
      };
    };
  };
  /** Delete a group */
  deleteGroup: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success: string;
          };
        };
      };
    };
  };
  /** Get a group */
  getGroup: {
    parameters: {
      path: {
        /**
         * @description Use group name instead of id
         * @example name
         */
        id: string;
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            group: {
              id: number;
              automatic: boolean;
              name: string;
              user_count: number;
              mentionable_level: number;
              messageable_level: number;
              visibility_level: number;
              primary_group: boolean;
              title: string | null;
              grant_trust_level: string | null;
              incoming_email: string | null;
              has_messages: boolean;
              flair_url: string | null;
              flair_bg_color: string | null;
              flair_color: string | null;
              bio_raw: string | null;
              bio_cooked: string | null;
              bio_excerpt: string | null;
              public_admission: boolean;
              public_exit: boolean;
              allow_membership_requests: boolean;
              full_name: string | null;
              default_notification_level: number;
              membership_request_template: string | null;
              is_group_user: boolean;
              members_visibility_level: number;
              can_see_members: boolean;
              can_admin_group: boolean;
              can_edit_group?: boolean;
              publish_read_state: boolean;
              is_group_owner_display: boolean;
              mentionable: boolean;
              messageable: boolean;
              automatic_membership_email_domains: string | null;
              smtp_updated_at?: string | null;
              smtp_updated_by?: Record<string, never> | null;
              smtp_enabled?: boolean;
              smtp_server: string | null;
              smtp_port: string | null;
              smtp_ssl_mode: number | null;
              imap_enabled?: boolean;
              imap_updated_at?: string | null;
              imap_updated_by?: Record<string, never> | null;
              imap_server: string | null;
              imap_port: string | null;
              imap_ssl: string | null;
              imap_mailbox_name: string;
              imap_mailboxes: unknown[];
              email_username: string | null;
              email_from_alias?: string | null;
              email_password: string | null;
              imap_last_error: string | null;
              imap_old_emails: string | null;
              imap_new_emails: string | null;
              message_count: number;
              allow_unknown_sender_topic_replies: boolean;
              associated_group_ids?: unknown[];
              watching_category_ids: unknown[];
              tracking_category_ids: unknown[];
              watching_first_post_category_ids: unknown[];
              regular_category_ids: unknown[];
              muted_category_ids: unknown[];
              watching_tags?: unknown[];
              watching_first_post_tags?: unknown[];
              tracking_tags?: unknown[];
              regular_tags?: unknown[];
              muted_tags?: unknown[];
            };
            extras: {
              visible_group_names: unknown[];
            };
          };
        };
      };
    };
  };
  /** Update a group */
  updateGroup: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          group: {
            name: string;
            full_name?: string;
            /** @description About Group */
            bio_raw?: string;
            /** @description comma,separated */
            usernames?: string;
            /** @description comma,separated */
            owner_usernames?: string;
            /** @description pipe|separated */
            automatic_membership_email_domains?: string;
            visibility_level?: number;
            primary_group?: boolean;
            flair_icon?: string;
            flair_upload_id?: number;
            flair_bg_color?: string;
            public_admission?: boolean;
            public_exit?: boolean;
            default_notification_level?: number;
            muted_category_ids?: number[];
            regular_category_ids?: number[];
            watching_category_ids?: number[];
            tracking_category_ids?: number[];
            watching_first_post_category_ids?: number[];
          };
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success?: string;
          };
        };
      };
    };
  };
  /** List group members */
  listGroupMembers: {
    parameters: {
      path: {
        /**
         * @description Use group name instead of id
         * @example name
         */
        id: string;
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            members: ({
                id: number;
                username: string;
                name: string | null;
                avatar_template: string;
                title: string | null;
                last_posted_at: string;
                last_seen_at: string;
                added_at: string;
                timezone: string;
              })[];
            owners: ({
                id: number;
                username: string;
                name: string | null;
                avatar_template: string;
                title: string | null;
                last_posted_at: string;
                last_seen_at: string;
                added_at: string;
                timezone: string;
              })[];
            meta: {
              total: number;
              limit: number;
              offset: number;
            };
          };
        };
      };
    };
  };
  /** Add group members */
  addGroupMembers: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description comma separated list
           * @example username1,username2
           */
          usernames?: string;
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            success: string;
            usernames: unknown[];
            emails: unknown[];
          };
        };
      };
    };
  };
  /** Remove group members */
  removeGroupMembers: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description comma separated list
           * @example username1,username2
           */
          usernames?: string;
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            success: string;
            usernames: unknown[];
            skipped_usernames: unknown[];
          };
        };
      };
    };
  };
  /** List groups */
  listGroups: {
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            groups: ({
                id: number;
                automatic: boolean;
                name: string;
                display_name: string;
                user_count: number;
                mentionable_level: number;
                messageable_level: number;
                visibility_level: number;
                primary_group: boolean;
                title: string | null;
                grant_trust_level: string | null;
                incoming_email: string | null;
                has_messages: boolean;
                flair_url: string | null;
                flair_bg_color: string | null;
                flair_color: string | null;
                bio_raw: string | null;
                bio_cooked: string | null;
                bio_excerpt: string | null;
                public_admission: boolean;
                public_exit: boolean;
                allow_membership_requests: boolean;
                full_name: string | null;
                default_notification_level: number;
                membership_request_template: string | null;
                is_group_user?: boolean;
                is_group_owner?: boolean;
                members_visibility_level: number;
                can_see_members: boolean;
                can_admin_group: boolean;
                can_edit_group?: boolean;
                publish_read_state: boolean;
              })[];
            extras: {
              type_filters: unknown[];
            };
            total_rows_groups: number;
            load_more_groups: string;
          };
        };
      };
    };
  };
  /** Create an invite */
  createInvite: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description required for email invites only
           * @example not-a-user-yet@example.com
           */
          email?: string;
          /** @default false */
          skip_email?: boolean;
          /** @description optional, for email invites */
          custom_message?: string;
          /**
           * @description optional, for link invites
           * @default 1
           * @example 5
           */
          max_redemptions_allowed?: number;
          topic_id?: number;
          /**
           * @description Optional, either this or `group_names`. Comma separated
           * list for multiple ids.
           * @example 42,43
           */
          group_ids?: string;
          /**
           * @description Optional, either this or `group_ids`. Comma separated
           * list for multiple names.
           * @example foo,bar
           */
          group_names?: string;
          /**
           * @description optional, if not supplied, the invite_expiry_days site
           * setting is used
           */
          expires_at?: string;
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            /** @example 42 */
            id?: number;
            /** @example http://example.com/invites/9045fd767efe201ca60c6658bcf14158 */
            link?: string;
            /** @example not-a-user-yet@example.com */
            email?: string;
            /** @example false */
            emailed?: boolean;
            /** @example Hello world! */
            custom_message?: string | null;
            /** @example [] */
            topics?: unknown[];
            /** @example [] */
            groups?: unknown[];
            /** @example 2021-01-01T12:00:00.000Z */
            created_at?: string;
            /** @example 2021-01-01T12:00:00.000Z */
            updated_at?: string;
            /** @example 2021-02-01T12:00:00.000Z */
            expires_at?: string;
            /** @example false */
            expired?: boolean;
          };
        };
      };
    };
  };
  /** Create multiple invites */
  createMultipleInvites: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description pass 1 email per invite to be generated. other properties
           * will be shared by each invite.
           * @example [
           *   "not-a-user-yet-1@example.com",
           *   "not-a-user-yet-2@example.com"
           * ]
           */
          email?: string;
          /** @default false */
          skip_email?: boolean;
          /** @description optional, for email invites */
          custom_message?: string;
          /**
           * @description optional, for link invites
           * @default 1
           * @example 5
           */
          max_redemptions_allowed?: number;
          topic_id?: number;
          /**
           * @description Optional, either this or `group_names`. Comma separated
           * list for multiple ids.
           * @example 42,43
           */
          group_ids?: string;
          /**
           * @description Optional, either this or `group_ids`. Comma separated
           * list for multiple names.
           * @example foo,bar
           */
          group_names?: string;
          /**
           * @description optional, if not supplied, the invite_expiry_days site
           * setting is used
           */
          expires_at?: string;
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            /** @example 42 */
            num_successfully_created_invitations?: number;
            /** @example 42 */
            num_failed_invitations?: number;
            /** @example [] */
            failed_invitations?: unknown[];
            /**
             * @example [
             *   {
             *     "id": 42,
             *     "link": "http://example.com/invites/9045fd767efe201ca60c6658bcf14158",
             *     "email": "not-a-user-yet-1@example.com",
             *     "emailed": true,
             *     "custom_message": "Hello world!",
             *     "topics": [],
             *     "groups": [],
             *     "created_at": "2021-01-01T12:00:00.000Z",
             *     "updated_at": "2021-01-01T12:00:00.000Z",
             *     "expires_at": "2021-02-01T12:00:00.000Z",
             *     "expired": false
             *   },
             *   {
             *     "id": 42,
             *     "link": "http://example.com/invites/c6658bcf141589045fd767efe201ca60",
             *     "email": "not-a-user-yet-2@example.com",
             *     "emailed": true,
             *     "custom_message": "Hello world!",
             *     "topics": [],
             *     "groups": [],
             *     "created_at": "2021-01-01T12:00:00.000Z",
             *     "updated_at": "2021-01-01T12:00:00.000Z",
             *     "expires_at": "2021-02-01T12:00:00.000Z",
             *     "expired": false
             *   }
             * ]
             */
            successful_invitations?: unknown[];
          };
        };
      };
    };
  };
  /** Get the notifications that belong to the current user */
  getNotifications: {
    responses: {
      /** @description notifications */
      200: {
        content: {
          "application/json": {
            notifications?: ({
                id?: number;
                user_id?: number;
                notification_type?: number;
                read?: boolean;
                created_at?: string;
                post_number?: number | null;
                topic_id?: number | null;
                slug?: string | null;
                data?: {
                  badge_id?: number;
                  badge_name?: string;
                  badge_slug?: string;
                  badge_title?: boolean;
                  username?: string;
                };
              })[];
            total_rows_notifications?: number;
            seen_notification_id?: number;
            load_more_notifications?: string;
          };
        };
      };
    };
  };
  /** Mark notifications as read */
  markNotificationsAsRead: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description (optional) Leave off to mark all notifications as
           * read
           */
          id?: number;
        };
      };
    };
    responses: {
      /** @description notifications marked read */
      200: {
        content: {
          "application/json": {
            success?: string;
          };
        };
      };
    };
  };
  /** List latest posts across topics */
  listPosts: {
    parameters: {
      query?: {
        /** @description Load posts with an id lower than this value. Useful for pagination. */
        before?: string;
      };
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
    };
    responses: {
      /** @description latest posts */
      200: {
        content: {
          "application/json": {
            latest_posts?: ({
                id?: number;
                name?: string;
                username?: string;
                avatar_template?: string;
                created_at?: string;
                cooked?: string;
                post_number?: number;
                post_type?: number;
                updated_at?: string;
                reply_count?: number;
                reply_to_post_number?: string | null;
                quote_count?: number;
                incoming_link_count?: number;
                reads?: number;
                readers_count?: number;
                score?: number;
                yours?: boolean;
                topic_id?: number;
                topic_slug?: string;
                topic_title?: string;
                topic_html_title?: string;
                category_id?: number;
                display_username?: string;
                primary_group_name?: string | null;
                flair_name?: string | null;
                flair_url?: string | null;
                flair_bg_color?: string | null;
                flair_color?: string | null;
                flair_group_id?: number | null;
                version?: number;
                can_edit?: boolean;
                can_delete?: boolean;
                can_recover?: boolean;
                can_see_hidden_post?: boolean;
                can_wiki?: boolean;
                user_title?: string | null;
                raw?: string;
                actions_summary?: {
                    id?: number;
                    can_act?: boolean;
                  }[];
                moderator?: boolean;
                admin?: boolean;
                staff?: boolean;
                user_id?: number;
                hidden?: boolean;
                trust_level?: number;
                deleted_at?: string | null;
                user_deleted?: boolean;
                edit_reason?: string | null;
                can_view_edit_history?: boolean;
                wiki?: boolean;
                reviewable_id?: number | null;
                reviewable_score_count?: number;
                reviewable_score_pending_count?: number;
              })[];
          };
        };
      };
    };
  };
  /** Creates a new topic, a new post, or a private message */
  createTopicPostPM: {
    requestBody?: {
      content: {
        "application/json": {
          /** @description Required if creating a new topic or new private message. */
          title?: string;
          raw: string;
          /** @description Required if creating a new post. */
          topic_id?: number;
          /**
           * @description Optional if creating a new topic, and ignored if creating
           * a new post.
           */
          category?: number;
          /**
           * @description Required for private message, comma separated.
           * @example blake,sam
           */
          target_recipients?: string;
          /**
           * @deprecated
           * @description Deprecated. Use target_recipients instead.
           */
          target_usernames?: string;
          /**
           * @description Required for new private message.
           * @example private_message
           */
          archetype?: string;
          created_at?: string;
          /** @description Optional, the post number to reply to inside a topic. */
          reply_to_post_number?: number;
          /**
           * @description Provide a URL from a remote system to associate a forum
           * topic with that URL, typically for using Discourse as a comments
           * system for an external blog.
           */
          embed_url?: string;
          /**
           * @description Provide an external_id from a remote system to associate
           * a forum topic with that id.
           */
          external_id?: string;
        };
      };
    };
    responses: {
      /** @description post created */
      200: {
        content: {
          "application/json": {
            id: number;
            name: string | null;
            username: string;
            avatar_template: string;
            created_at: string;
            raw?: string;
            cooked: string;
            post_number: number;
            post_type: number;
            updated_at: string;
            reply_count: number;
            reply_to_post_number: string | null;
            quote_count: number;
            incoming_link_count: number;
            reads: number;
            readers_count: number;
            score: number;
            yours: boolean;
            topic_id: number;
            topic_slug: string;
            display_username: string | null;
            primary_group_name: string | null;
            flair_name: string | null;
            flair_url: string | null;
            flair_bg_color: string | null;
            flair_color: string | null;
            flair_group_id?: number | null;
            version: number;
            can_edit: boolean;
            can_delete: boolean;
            can_recover: boolean;
            can_see_hidden_post?: boolean;
            can_wiki: boolean;
            user_title: string | null;
            bookmarked: boolean;
            actions_summary: {
                id: number;
                can_act: boolean;
              }[];
            moderator: boolean;
            admin: boolean;
            staff: boolean;
            user_id: number;
            draft_sequence: number;
            hidden: boolean;
            trust_level: number;
            deleted_at: string | null;
            user_deleted: boolean;
            edit_reason: string | null;
            can_view_edit_history: boolean;
            wiki: boolean;
            reviewable_id: number | null;
            reviewable_score_count: number;
            reviewable_score_pending_count: number;
            mentioned_users?: unknown[];
          };
        };
      };
    };
  };
  /**
   * Retrieve a single post
   * @description This endpoint can be used to get the number of likes on a post using the
   * `actions_summary` property in the response. `actions_summary` responses
   * with the id of `2` signify a `like`. If there are no `actions_summary`
   * items with the id of `2`, that means there are 0 likes. Other ids likely
   * refer to various different flag types.
   */
  getPost: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description single reviewable post */
      200: {
        content: {
          "application/json": {
            id: number;
            username: string;
            avatar_template: string;
            created_at: string;
            cooked: string;
            post_number: number;
            post_type: number;
            updated_at: string;
            reply_count: number;
            reply_to_post_number: string | null;
            quote_count: number;
            incoming_link_count: number;
            reads: number;
            readers_count: number;
            score: number;
            yours: boolean;
            topic_id: number;
            topic_slug: string;
            primary_group_name: string | null;
            flair_name: string | null;
            flair_url: string | null;
            flair_bg_color: string | null;
            flair_color: string | null;
            flair_group_id?: number | null;
            version: number;
            can_edit: boolean;
            can_delete: boolean;
            can_recover: boolean;
            can_see_hidden_post?: boolean;
            can_wiki: boolean;
            user_title: string | null;
            bookmarked: boolean;
            raw: string;
            actions_summary: {
                /** @description `2`: like, `3`, `4`, `6`, `7`, `8`: flag */
                id: number;
                count?: number;
                acted?: boolean;
                can_undo?: boolean;
                can_act?: boolean;
              }[];
            moderator: boolean;
            admin: boolean;
            staff: boolean;
            user_id: number;
            hidden: boolean;
            trust_level: number;
            deleted_at: string | null;
            user_deleted: boolean;
            edit_reason: string | null;
            can_view_edit_history: boolean;
            wiki: boolean;
            reviewable_id: number | null;
            reviewable_score_count: number;
            reviewable_score_pending_count: number;
            mentioned_users?: unknown[];
            name?: string | null;
            display_username?: string | null;
            [key: string]: unknown;
          };
        };
      };
    };
  };
  /** Update a single post */
  updatePost: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          post?: {
            raw: string;
            edit_reason?: string;
          };
        };
      };
    };
    responses: {
      /** @description post updated */
      200: {
        content: {
          "application/json": {
            post: {
              id: number;
              username: string;
              avatar_template: string;
              created_at: string;
              cooked: string;
              post_number: number;
              post_type: number;
              updated_at: string;
              reply_count: number;
              reply_to_post_number: string | null;
              quote_count: number;
              incoming_link_count: number;
              reads: number;
              readers_count: number;
              score: number;
              yours: boolean;
              topic_id: number;
              topic_slug: string;
              primary_group_name: string | null;
              flair_name: string | null;
              flair_url: string | null;
              flair_bg_color: string | null;
              flair_color: string | null;
              flair_group_id?: number | null;
              version: number;
              can_edit: boolean;
              can_delete: boolean;
              can_recover: boolean;
              can_see_hidden_post?: boolean;
              can_wiki: boolean;
              user_title: string | null;
              bookmarked: boolean;
              raw: string;
              actions_summary: {
                  id: number;
                  can_act: boolean;
                }[];
              moderator: boolean;
              admin: boolean;
              staff: boolean;
              user_id: number;
              draft_sequence: number;
              hidden: boolean;
              trust_level: number;
              deleted_at: string | null;
              user_deleted: boolean;
              edit_reason: string | null;
              can_view_edit_history: boolean;
              wiki: boolean;
              reviewable_id: number | null;
              reviewable_score_count: number;
              reviewable_score_pending_count: number;
              mentioned_users?: unknown[];
              name?: string | null;
              display_username?: string | null;
            };
          };
        };
      };
    };
  };
  /** delete a single post */
  deletePost: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The `SiteSetting.can_permanently_delete` needs to be
           * enabled first before this param can be used. Also this endpoint
           * needs to be called first without `force_destroy` and then followed
           * up with a second call 5 minutes later with `force_destroy` to
           * permanently delete.
           * @example true
           */
          force_destroy?: boolean;
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: never;
      };
    };
  };
  /** List replies to a post */
  postReplies: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description post replies */
      200: {
        content: {
          "application/json": ({
              id: number;
              name: string | null;
              username: string;
              avatar_template: string;
              created_at: string;
              cooked: string;
              post_number: number;
              post_type: number;
              updated_at: string;
              reply_count: number;
              reply_to_post_number: number;
              quote_count: number;
              incoming_link_count: number;
              reads: number;
              readers_count: number;
              score: number;
              yours: boolean;
              topic_id: number;
              topic_slug: string;
              display_username: string | null;
              primary_group_name: string | null;
              flair_name: string | null;
              flair_url: string | null;
              flair_bg_color: string | null;
              flair_color: string | null;
              flair_group_id?: number | null;
              version: number;
              can_edit: boolean;
              can_delete: boolean;
              can_recover: boolean;
              can_see_hidden_post: boolean;
              can_wiki: boolean;
              user_title: string | null;
              reply_to_user: {
                username: string;
                name?: string;
                avatar_template: string;
              };
              bookmarked: boolean;
              actions_summary: {
                  id: number;
                  can_act: boolean;
                }[];
              moderator: boolean;
              admin: boolean;
              staff: boolean;
              user_id: number;
              hidden: boolean;
              trust_level: number;
              deleted_at: string | null;
              user_deleted: boolean;
              edit_reason: string | null;
              can_view_edit_history: boolean;
              wiki: boolean;
              reviewable_id: number | null;
              reviewable_score_count: number;
              reviewable_score_pending_count: number;
            })[];
        };
      };
    };
  };
  /** Lock a post from being edited */
  lockPost: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          locked: string;
        };
      };
    };
    responses: {
      /** @description post updated */
      200: {
        content: {
          "application/json": {
            locked?: boolean;
          };
        };
      };
    };
  };
  /** Like a post and other actions */
  performPostAction: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          id: number;
          post_action_type_id: number;
          flag_topic?: boolean;
        };
      };
    };
    responses: {
      /** @description post updated */
      200: {
        content: {
          "application/json": {
            id?: number;
            name?: string;
            username?: string;
            avatar_template?: string;
            created_at?: string;
            cooked?: string;
            post_number?: number;
            post_type?: number;
            updated_at?: string;
            reply_count?: number;
            reply_to_post_number?: string | null;
            quote_count?: number;
            incoming_link_count?: number;
            reads?: number;
            readers_count?: number;
            score?: number;
            yours?: boolean;
            topic_id?: number;
            topic_slug?: string;
            display_username?: string;
            primary_group_name?: string | null;
            flair_name?: string | null;
            flair_url?: string | null;
            flair_bg_color?: string | null;
            flair_color?: string | null;
            version?: number;
            can_edit?: boolean;
            can_delete?: boolean;
            can_recover?: boolean;
            can_wiki?: boolean;
            user_title?: string | null;
            actions_summary?: {
                id?: number;
                count?: number;
                acted?: boolean;
                can_undo?: boolean;
              }[];
            moderator?: boolean;
            admin?: boolean;
            staff?: boolean;
            user_id?: number;
            hidden?: boolean;
            trust_level?: number;
            deleted_at?: string | null;
            user_deleted?: boolean;
            edit_reason?: string | null;
            can_view_edit_history?: boolean;
            wiki?: boolean;
            notice?: Record<string, never>;
            reviewable_id?: number | null;
            reviewable_score_count?: number;
            reviewable_score_pending_count?: number;
          };
        };
      };
    };
  };
  /** Get a list of private messages for a user */
  listUserPrivateMessages: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description private messages */
      200: {
        content: {
          "application/json": {
            users?: {
                id?: number;
                username?: string;
                name?: string;
                avatar_template?: string;
              }[];
            primary_groups?: unknown[];
            topic_list?: {
              can_create_topic?: boolean;
              draft?: string | null;
              draft_key?: string;
              draft_sequence?: number;
              per_page?: number;
              topics?: ({
                  id?: number;
                  title?: string;
                  fancy_title?: string;
                  slug?: string;
                  posts_count?: number;
                  reply_count?: number;
                  highest_post_number?: number;
                  image_url?: string | null;
                  created_at?: string;
                  last_posted_at?: string;
                  bumped?: boolean;
                  bumped_at?: string;
                  archetype?: string;
                  unseen?: boolean;
                  last_read_post_number?: number;
                  unread_posts?: number;
                  pinned?: boolean;
                  unpinned?: string | null;
                  visible?: boolean;
                  closed?: boolean;
                  archived?: boolean;
                  notification_level?: number;
                  bookmarked?: boolean;
                  liked?: boolean;
                  views?: number;
                  like_count?: number;
                  has_summary?: boolean;
                  last_poster_username?: string;
                  category_id?: string | null;
                  pinned_globally?: boolean;
                  featured_link?: string | null;
                  allowed_user_count?: number;
                  posters?: ({
                      extras?: string;
                      description?: string;
                      user_id?: number;
                      primary_group_id?: number | null;
                    })[];
                  participants?: ({
                      extras?: string;
                      description?: string | null;
                      user_id?: number;
                      primary_group_id?: number | null;
                    })[];
                })[];
            };
          };
        };
      };
    };
  };
  /** Get a list of private messages sent for a user */
  getUserSentPrivateMessages: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description private messages */
      200: {
        content: {
          "application/json": {
            users?: ({
                id?: number;
                username?: string;
                name?: string | null;
                avatar_template?: string;
              })[];
            primary_groups?: unknown[];
            topic_list?: {
              can_create_topic?: boolean;
              draft?: string | null;
              draft_key?: string;
              draft_sequence?: number;
              per_page?: number;
              topics?: ({
                  id?: number;
                  title?: string;
                  fancy_title?: string;
                  slug?: string;
                  posts_count?: number;
                  reply_count?: number;
                  highest_post_number?: number;
                  image_url?: string | null;
                  created_at?: string;
                  last_posted_at?: string;
                  bumped?: boolean;
                  bumped_at?: string;
                  archetype?: string;
                  unseen?: boolean;
                  last_read_post_number?: number;
                  unread_posts?: number;
                  pinned?: boolean;
                  unpinned?: string | null;
                  visible?: boolean;
                  closed?: boolean;
                  archived?: boolean;
                  notification_level?: number;
                  bookmarked?: boolean;
                  liked?: boolean;
                  views?: number;
                  like_count?: number;
                  has_summary?: boolean;
                  last_poster_username?: string;
                  category_id?: string | null;
                  pinned_globally?: boolean;
                  featured_link?: string | null;
                  allowed_user_count?: number;
                  posters?: ({
                      extras?: string;
                      description?: string;
                      user_id?: number;
                      primary_group_id?: number | null;
                    })[];
                  participants?: unknown[];
                })[];
            };
          };
        };
      };
    };
  };
  /** Search for a term */
  search: {
    parameters: {
      query?: {
        /**
         * @description The query string needs to be url encoded and is made up of the following options:
         * - Search term. This is just a string. Usually it would be the first item in the query.
         * - `@<username>`: Use the `@` followed by the username to specify posts by this user.
         * - `#<category>`: Use the `#` followed by the category slug to search within this category.
         * - `tags:`: `api,solved` or for posts that have all the specified tags `api+solved`.
         * - `before:`: `yyyy-mm-dd`
         * - `after:`: `yyyy-mm-dd`
         * - `order:`: `latest`, `likes`, `views`, `latest_topic`
         * - `assigned:`: username (without `@`)
         * - `in:`: `title`, `likes`, `personal`, `messages`, `seen`, `unseen`, `posted`, `created`, `watching`, `tracking`, `bookmarks`, `assigned`, `unassigned`, `first`, `pinned`, `wiki`
         * - `with:`: `images`
         * - `status:`: `open`, `closed`, `public`, `archived`, `noreplies`, `single_user`, `solved`, `unsolved`
         * - `group:`: group_name or group_id
         * - `group_messages:`: group_name or group_id
         * - `min_posts:`: 1
         * - `max_posts:`: 10
         * - `min_views:`: 1
         * - `max_views:`: 10
         *
         * If you are using cURL you can use the `-G` and the `--data-urlencode` flags to encode the query:
         *
         * ```
         * curl -i -sS -X GET -G "http://localhost:4200/search.json" \
         * --data-urlencode 'q=wordpress @scossar #fun after:2020-01-01'
         * ```
         *
         * @example api @blake #support tags:api after:2021-06-04 in:unseen in:open
         * order:latest_topic
         */
        q?: string;
        /** @example 1 */
        page?: number;
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            posts: unknown[];
            users: unknown[];
            categories: unknown[];
            tags: unknown[];
            groups: unknown[];
            grouped_search_result: {
              more_posts: string | null;
              more_users: string | null;
              more_categories: string | null;
              term: string;
              search_log_id: number;
              more_full_page_results: string | null;
              can_create_topic: boolean;
              error: string | null;
              extra?: {
                categories?: unknown[] | null;
              };
              post_ids: unknown[];
              user_ids: unknown[];
              category_ids: unknown[];
              tag_ids: unknown[];
              group_ids: unknown[];
            };
          };
        };
      };
    };
  };
  /**
   * Get site info
   * @description Can be used to fetch all categories and subcategories
   */
  getSite: {
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            default_archetype: string;
            notification_types: {
              mentioned: number;
              replied: number;
              quoted: number;
              edited: number;
              liked: number;
              private_message: number;
              invited_to_private_message: number;
              invitee_accepted: number;
              posted: number;
              watching_category_or_tag: number;
              new_features?: number;
              admin_problems?: number;
              moved_post: number;
              linked: number;
              granted_badge: number;
              invited_to_topic: number;
              custom: number;
              group_mentioned: number;
              group_message_summary: number;
              watching_first_post: number;
              topic_reminder: number;
              liked_consolidated: number;
              linked_consolidated: number;
              post_approved: number;
              code_review_commit_approved: number;
              membership_request_accepted: number;
              membership_request_consolidated: number;
              bookmark_reminder: number;
              reaction: number;
              votes_released: number;
              event_reminder: number;
              event_invitation: number;
              chat_mention: number;
              chat_message: number;
              chat_invitation: number;
              chat_group_mention: number;
              chat_quoted?: number;
              chat_watched_thread?: number;
              assigned?: number;
              question_answer_user_commented?: number;
              following?: number;
              following_created_topic?: number;
              following_replied?: number;
              circles_activity?: number;
            };
            post_types: {
              regular: number;
              moderator_action: number;
              small_action: number;
              whisper: number;
            };
            trust_levels: {
              newuser: number;
              basic: number;
              member: number;
              regular: number;
              leader: number;
            };
            user_tips?: {
              first_notification: number;
              topic_timeline: number;
              post_menu: number;
              topic_notification_levels: number;
              suggested_topics: number;
            };
            groups: ({
                id: number;
                name: string;
                flair_url: string | null;
                flair_bg_color: string | null;
                flair_color: string | null;
              })[];
            filters: unknown[];
            periods: unknown[];
            top_menu_items: unknown[];
            anonymous_top_menu_items: unknown[];
            uncategorized_category_id: number;
            user_field_max_length: number;
            post_action_types: ({
                id: number | null;
                name_key: string | null;
                name: string;
                description: string;
                short_description: string;
                is_flag: boolean;
                require_message: boolean;
                enabled: boolean;
                applies_to: unknown[];
                is_used: boolean;
                position?: number;
              })[];
            topic_flag_types: ({
                id: number | null;
                name_key: string | null;
                name: string;
                description: string;
                short_description: string;
                is_flag: boolean;
                require_message: boolean;
                enabled: boolean;
                applies_to: unknown[];
                is_used: boolean;
                position?: number;
              })[];
            can_create_tag: boolean;
            can_tag_topics: boolean;
            can_tag_pms: boolean;
            tags_filter_regexp: string;
            top_tags: unknown[];
            wizard_required?: boolean;
            can_associate_groups?: boolean;
            topic_featured_link_allowed_category_ids: unknown[];
            user_themes: ({
                theme_id: number;
                name: string;
                default: boolean;
                color_scheme_id: number | null;
              })[];
            user_color_schemes: {
                id: number;
                name: string;
                is_dark: boolean;
              }[];
            default_dark_color_scheme: Record<string, never> | null;
            censored_regexp: Record<string, never>[];
            custom_emoji_translation: Record<string, never>;
            watched_words_replace: string | null;
            watched_words_link: string | null;
            markdown_additional_options?: Record<string, never>;
            hashtag_configurations?: Record<string, never>;
            hashtag_icons?: Record<string, never>;
            displayed_about_plugin_stat_groups?: unknown[];
            categories: ({
                id: number;
                name: string;
                color: string;
                text_color: string;
                slug: string;
                topic_count: number;
                post_count: number;
                position: number;
                description?: string | null;
                description_text?: string | null;
                description_excerpt?: string | null;
                topic_url: string;
                read_restricted: boolean;
                permission: number;
                notification_level: number;
                topic_template: string | null;
                has_children: boolean;
                subcategory_count: number | null;
                sort_order: string | null;
                sort_ascending: string | null;
                show_subcategory_list: boolean;
                num_featured_topics: number;
                default_view: string | null;
                subcategory_list_style: string;
                default_top_period: string;
                default_list_filter: string;
                minimum_required_tags: number;
                navigate_to_first_post_after_read: boolean;
                allowed_tags: unknown[];
                allowed_tag_groups: unknown[];
                allow_global_tags: boolean;
                required_tag_groups: {
                    name: string;
                    min_count: number;
                  }[];
                read_only_banner: string | null;
                uploaded_logo: string | null;
                uploaded_logo_dark: string | null;
                uploaded_background: string | null;
                uploaded_background_dark: string | null;
                can_edit: boolean;
                custom_fields?: {
                  [key: string]: unknown;
                } | null;
                parent_category_id?: number;
                form_template_ids?: unknown[];
              })[];
            archetypes: {
                id: string;
                name: string;
                options: unknown[];
              }[];
            user_fields: unknown[];
            auth_providers: unknown[];
            whispers_allowed_groups_names?: unknown[];
            denied_emojis?: unknown[];
            valid_flag_applies_to_types?: unknown[];
            navigation_menu_site_top_tags?: unknown[];
          };
        };
      };
    };
  };
  /**
   * Get site basic info
   * @description Can be used to fetch basic info about a site
   */
  getSiteBasicInfo: {
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            logo_url: string;
            logo_small_url: string;
            apple_touch_icon_url: string;
            favicon_url: string;
            title: string;
            description: string;
            header_primary_color: string;
            header_background_color: string;
            login_required: boolean;
            locale: string;
            include_in_discourse_discover: boolean;
            mobile_logo_url: string;
          };
        };
      };
    };
  };
  /** Get a list of tag groups */
  listTagGroups: {
    responses: {
      /** @description tags */
      200: {
        content: {
          "application/json": {
            tag_groups?: {
                id?: number;
                name?: string;
                tag_names?: unknown[];
                parent_tag_name?: unknown[];
                one_per_topic?: boolean;
                permissions?: {
                  staff?: number;
                };
              }[];
          };
        };
      };
    };
  };
  /** Creates a tag group */
  createTagGroup: {
    requestBody?: {
      content: {
        "application/json": {
          name: string;
        };
      };
    };
    responses: {
      /** @description tag group created */
      200: {
        content: {
          "application/json": {
            tag_group: {
              id: number;
              name: string;
              tag_names: unknown[];
              parent_tag_name: unknown[];
              one_per_topic: boolean;
              permissions: Record<string, never>;
            };
          };
        };
      };
    };
  };
  /** Get a single tag group */
  getTagGroup: {
    parameters: {
      path: {
        id: string;
      };
    };
    responses: {
      /** @description notifications */
      200: {
        content: {
          "application/json": {
            tag_group?: {
              id?: number;
              name?: string;
              tag_names?: unknown[];
              parent_tag_name?: unknown[];
              one_per_topic?: boolean;
              permissions?: {
                everyone?: number;
              };
            };
          };
        };
      };
    };
  };
  /** Update tag group */
  updateTagGroup: {
    parameters: {
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          name?: string;
        };
      };
    };
    responses: {
      /** @description Tag group updated */
      200: {
        content: {
          "application/json": {
            success?: string;
            tag_group?: {
              id?: number;
              name?: string;
              tag_names?: unknown[];
              parent_tag_name?: unknown[];
              one_per_topic?: boolean;
              permissions?: {
                everyone?: number;
              };
            };
          };
        };
      };
    };
  };
  /** Get a list of tags */
  listTags: {
    responses: {
      /** @description notifications */
      200: {
        content: {
          "application/json": {
            tags?: ({
                id?: string;
                text?: string;
                count?: number;
                pm_count?: number;
                target_tag?: string | null;
              })[];
            extras?: {
              categories?: unknown[];
            };
          };
        };
      };
    };
  };
  /** Get a specific tag */
  getTag: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      /** @description notifications */
      200: {
        content: {
          "application/json": {
            users?: ({
                id?: number;
                username?: string;
                name?: string | null;
                avatar_template?: string;
              })[];
            primary_groups?: unknown[];
            topic_list?: {
              can_create_topic?: boolean;
              draft?: string | null;
              draft_key?: string;
              draft_sequence?: number;
              per_page?: number;
              tags?: {
                  id?: number;
                  name?: string;
                  topic_count?: number;
                  staff?: boolean;
                }[];
              topics?: ({
                  id?: number;
                  title?: string;
                  fancy_title?: string;
                  slug?: string;
                  posts_count?: number;
                  reply_count?: number;
                  highest_post_number?: number;
                  image_url?: string | null;
                  created_at?: string;
                  last_posted_at?: string;
                  bumped?: boolean;
                  bumped_at?: string;
                  archetype?: string;
                  unseen?: boolean;
                  last_read_post_number?: number;
                  unread_posts?: number;
                  pinned?: boolean;
                  unpinned?: string | null;
                  visible?: boolean;
                  closed?: boolean;
                  archived?: boolean;
                  notification_level?: number;
                  bookmarked?: boolean;
                  liked?: boolean;
                  tags?: unknown[];
                  views?: number;
                  like_count?: number;
                  has_summary?: boolean;
                  last_poster_username?: string;
                  category_id?: number;
                  pinned_globally?: boolean;
                  featured_link?: string | null;
                  posters?: ({
                      extras?: string;
                      description?: string;
                      user_id?: number;
                      primary_group_id?: number | null;
                    })[];
                })[];
            };
          };
        };
      };
    };
  };
  /** Get specific posts from a topic */
  getSpecificPostsFromTopic: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          "post_ids[]": number;
        };
      };
    };
    responses: {
      /** @description specific posts */
      200: {
        content: {
          "application/json": {
            post_stream?: {
              posts?: ({
                  id?: number;
                  name?: string | null;
                  username?: string;
                  avatar_template?: string;
                  created_at?: string;
                  cooked?: string;
                  post_number?: number;
                  post_type?: number;
                  updated_at?: string;
                  reply_count?: number;
                  reply_to_post_number?: string | null;
                  quote_count?: number;
                  incoming_link_count?: number;
                  reads?: number;
                  readers_count?: number;
                  score?: number;
                  yours?: boolean;
                  topic_id?: number;
                  topic_slug?: string;
                  display_username?: string | null;
                  primary_group_name?: string | null;
                  flair_name?: string | null;
                  flair_url?: string | null;
                  flair_bg_color?: string | null;
                  flair_color?: string | null;
                  version?: number;
                  can_edit?: boolean;
                  can_delete?: boolean;
                  can_recover?: boolean;
                  can_wiki?: boolean;
                  read?: boolean;
                  user_title?: string | null;
                  actions_summary?: {
                      id?: number;
                      can_act?: boolean;
                    }[];
                  moderator?: boolean;
                  admin?: boolean;
                  staff?: boolean;
                  user_id?: number;
                  hidden?: boolean;
                  trust_level?: number;
                  deleted_at?: string | null;
                  user_deleted?: boolean;
                  edit_reason?: string | null;
                  can_view_edit_history?: boolean;
                  wiki?: boolean;
                  reviewable_id?: number;
                  reviewable_score_count?: number;
                  reviewable_score_pending_count?: number;
                })[];
            };
            id?: number;
          };
        };
      };
    };
  };
  /** Get a single topic */
  getTopic: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description specific posts */
      200: {
        content: {
          "application/json": {
            post_stream: {
              posts: ({
                  id: number;
                  name: string;
                  username: string;
                  avatar_template: string;
                  created_at: string;
                  cooked: string;
                  post_number: number;
                  post_type: number;
                  updated_at: string;
                  reply_count: number;
                  reply_to_post_number: string | null;
                  quote_count: number;
                  incoming_link_count: number;
                  reads: number;
                  readers_count: number;
                  score: number;
                  yours: boolean;
                  topic_id: number;
                  topic_slug: string;
                  display_username: string;
                  primary_group_name: string | null;
                  flair_name: string | null;
                  flair_url: string | null;
                  flair_bg_color: string | null;
                  flair_color: string | null;
                  version: number;
                  can_edit: boolean;
                  can_delete: boolean;
                  can_recover: boolean;
                  can_see_hidden_post?: boolean;
                  can_wiki: boolean;
                  link_counts: {
                      url: string;
                      internal: boolean;
                      reflection: boolean;
                      title: string;
                      clicks: number;
                    }[];
                  read: boolean;
                  user_title: string | null;
                  bookmarked: boolean;
                  actions_summary: {
                      id: number;
                      can_act: boolean;
                    }[];
                  moderator: boolean;
                  admin: boolean;
                  staff: boolean;
                  user_id: number;
                  hidden: boolean;
                  trust_level: number;
                  deleted_at: string | null;
                  user_deleted: boolean;
                  edit_reason: string | null;
                  can_view_edit_history: boolean;
                  wiki: boolean;
                  reviewable_id: number;
                  reviewable_score_count: number;
                  reviewable_score_pending_count: number;
                })[];
              stream: unknown[];
            };
            timeline_lookup: unknown[];
            suggested_topics: ({
                id: number;
                title: string;
                fancy_title: string;
                slug: string;
                posts_count: number;
                reply_count: number;
                highest_post_number: number;
                image_url: string | null;
                created_at: string;
                last_posted_at: string | null;
                bumped: boolean;
                bumped_at: string;
                archetype: string;
                unseen: boolean;
                pinned: boolean;
                unpinned: string | null;
                excerpt: string;
                visible: boolean;
                closed: boolean;
                archived: boolean;
                bookmarked: string | null;
                liked: string | null;
                tags: unknown[];
                tags_descriptions: Record<string, never>;
                like_count: number;
                views: number;
                category_id: number;
                featured_link: string | null;
                posters: {
                    extras: string;
                    description: string;
                    user: {
                      id: number;
                      username: string;
                      name: string;
                      avatar_template: string;
                    };
                  }[];
              })[];
            tags: unknown[];
            tags_descriptions: Record<string, never>;
            id: number;
            title: string;
            fancy_title: string;
            posts_count: number;
            created_at: string;
            views: number;
            reply_count: number;
            like_count: number;
            last_posted_at: string | null;
            visible: boolean;
            closed: boolean;
            archived: boolean;
            has_summary: boolean;
            archetype: string;
            slug: string;
            category_id: number;
            word_count: number | null;
            deleted_at: string | null;
            user_id: number;
            featured_link: string | null;
            pinned_globally: boolean;
            pinned_at: string | null;
            pinned_until: string | null;
            image_url: string | null;
            slow_mode_seconds: number;
            draft: string | null;
            draft_key: string;
            draft_sequence: number;
            unpinned: string | null;
            pinned: boolean;
            current_post_number?: number;
            highest_post_number: number | null;
            deleted_by: string | null;
            has_deleted: boolean;
            actions_summary: {
                id: number;
                count: number;
                hidden: boolean;
                can_act: boolean;
              }[];
            chunk_size: number;
            bookmarked: boolean;
            bookmarks: unknown[];
            topic_timer: string | null;
            message_bus_last_id: number;
            participant_count: number;
            show_read_indicator: boolean;
            thumbnails: string | null;
            slow_mode_enabled_until: string | null;
            details: {
              can_edit: boolean;
              notification_level: number;
              can_move_posts: boolean;
              can_delete: boolean;
              can_remove_allowed_users: boolean;
              can_create_post: boolean;
              can_reply_as_new_topic: boolean;
              can_invite_to?: boolean;
              can_invite_via_email?: boolean;
              can_flag_topic?: boolean;
              can_convert_topic: boolean;
              can_review_topic: boolean;
              can_close_topic: boolean;
              can_archive_topic: boolean;
              can_split_merge_topic: boolean;
              can_edit_staff_notes: boolean;
              can_toggle_topic_visibility: boolean;
              can_pin_unpin_topic: boolean;
              can_moderate_category: boolean;
              can_remove_self_id: number;
              participants?: ({
                  id: number;
                  username: string;
                  name: string;
                  avatar_template: string;
                  post_count: number;
                  primary_group_name: string | null;
                  flair_name: string | null;
                  flair_url: string | null;
                  flair_color: string | null;
                  flair_bg_color: string | null;
                  flair_group_id?: number | null;
                  admin: boolean;
                  moderator: boolean;
                  trust_level: number;
                })[];
              created_by: {
                id: number;
                username: string;
                name: string;
                avatar_template: string;
              };
              last_poster: {
                id: number;
                username: string;
                name: string;
                avatar_template: string;
              };
            };
          };
        };
      };
    };
  };
  /** Remove a topic */
  removeTopic: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description specific posts */
      200: {
        content: never;
      };
    };
  };
  /** Update a topic */
  updateTopic: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          topic?: {
            title?: string;
            category_id?: number;
          };
        };
      };
    };
    responses: {
      /** @description topic updated */
      200: {
        content: {
          "application/json": {
            basic_topic?: {
              id?: number;
              title?: string;
              fancy_title?: string;
              slug?: string;
              posts_count?: number;
            };
          };
        };
      };
    };
  };
  /** Invite to topic */
  inviteToTopic: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          user?: string;
          email?: string;
        };
      };
    };
    responses: {
      /** @description topic updated */
      200: {
        content: {
          "application/json": {
            user?: {
              id?: number;
              username?: string;
              name?: string;
              avatar_template?: string;
            };
          };
        };
      };
    };
  };
  /** Bookmark topic */
  bookmarkTopic: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      /** @description topic updated */
      200: {
        content: never;
      };
    };
  };
  /** Update the status of a topic */
  updateTopicStatus: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @enum {string} */
          status: "closed" | "pinned" | "pinned_globally" | "archived" | "visible";
          /** @enum {string} */
          enabled: "true" | "false";
          /**
           * @description Only required for `pinned` and `pinned_globally`
           * @example 2030-12-31
           */
          until?: string;
        };
      };
    };
    responses: {
      /** @description topic updated */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success?: string;
            topic_status_update?: string | null;
          };
        };
      };
    };
  };
  /** Get the latest topics */
  listLatestTopics: {
    parameters: {
      query?: {
        /**
         * @description Enum: `default`, `created`, `activity`, `views`, `posts`, `category`,
         * `likes`, `op_likes`, `posters`
         */
        order?: string;
        /** @description Defaults to `desc`, add `ascending=true` to sort asc */
        ascending?: string;
      };
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
    };
    responses: {
      /** @description topic updated */
      200: {
        content: {
          "application/json": {
            users?: ({
                id?: number;
                username?: string;
                name?: string | null;
                avatar_template?: string;
              })[];
            primary_groups?: unknown[];
            topic_list?: {
              can_create_topic?: boolean;
              draft?: string | null;
              draft_key?: string;
              draft_sequence?: number;
              per_page?: number;
              topics?: ({
                  id?: number;
                  title?: string;
                  fancy_title?: string;
                  slug?: string;
                  posts_count?: number;
                  reply_count?: number;
                  highest_post_number?: number;
                  image_url?: string;
                  created_at?: string;
                  last_posted_at?: string;
                  bumped?: boolean;
                  bumped_at?: string;
                  archetype?: string;
                  unseen?: boolean;
                  last_read_post_number?: number;
                  unread_posts?: number;
                  pinned?: boolean;
                  unpinned?: string | null;
                  visible?: boolean;
                  closed?: boolean;
                  archived?: boolean;
                  notification_level?: number;
                  bookmarked?: boolean;
                  liked?: boolean;
                  views?: number;
                  like_count?: number;
                  has_summary?: boolean;
                  last_poster_username?: string;
                  category_id?: number;
                  op_like_count?: number;
                  pinned_globally?: boolean;
                  featured_link?: string | null;
                  posters?: ({
                      extras?: string;
                      description?: string;
                      user_id?: number;
                      primary_group_id?: number | null;
                    })[];
                })[];
            };
          };
        };
      };
    };
  };
  /** Get the top topics filtered by period */
  listTopTopics: {
    parameters: {
      query?: {
        /** @description Enum: `all`, `yearly`, `quarterly`, `monthly`, `weekly`, `daily` */
        period?: string;
      };
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            users?: {
                id?: number;
                username?: string;
                name?: string;
                avatar_template?: string;
              }[];
            primary_groups?: unknown[];
            topic_list?: {
              can_create_topic?: boolean;
              draft?: string | null;
              draft_key?: string;
              draft_sequence?: number;
              for_period?: string;
              per_page?: number;
              topics?: ({
                  id?: number;
                  title?: string;
                  fancy_title?: string;
                  slug?: string;
                  posts_count?: number;
                  reply_count?: number;
                  highest_post_number?: number;
                  image_url?: string | null;
                  created_at?: string;
                  last_posted_at?: string;
                  bumped?: boolean;
                  bumped_at?: string;
                  archetype?: string;
                  unseen?: boolean;
                  last_read_post_number?: number;
                  unread_posts?: number;
                  pinned?: boolean;
                  unpinned?: boolean;
                  visible?: boolean;
                  closed?: boolean;
                  archived?: boolean;
                  notification_level?: number;
                  bookmarked?: boolean;
                  liked?: boolean;
                  views?: number;
                  like_count?: number;
                  has_summary?: boolean;
                  last_poster_username?: string;
                  category_id?: number;
                  op_like_count?: number;
                  pinned_globally?: boolean;
                  featured_link?: string | null;
                  posters?: ({
                      extras?: string | null;
                      description?: string;
                      user_id?: number;
                      primary_group_id?: number | null;
                    })[];
                })[];
            };
          };
        };
      };
    };
  };
  /** Set notification level */
  setNotificationLevel: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @enum {string} */
          notification_level: "0" | "1" | "2" | "3";
        };
      };
    };
    responses: {
      /** @description topic updated */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success?: string;
          };
        };
      };
    };
  };
  /** Update topic timestamp */
  updateTopicTimestamp: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @example 1594291380 */
          timestamp: string;
        };
      };
    };
    responses: {
      /** @description topic updated */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success?: string;
          };
        };
      };
    };
  };
  /** Create topic timer */
  createTopicTimer: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        id: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @example */
          time?: string;
          status_type?: string;
          based_on_last_post?: boolean;
          category_id?: number;
        };
      };
    };
    responses: {
      /** @description topic updated */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success?: string;
            execute_at?: string;
            duration?: string | null;
            based_on_last_post?: boolean;
            closed?: boolean;
            category_id?: number | null;
          };
        };
      };
    };
  };
  /** Get topic by external_id */
  getTopicByExternalId: {
    parameters: {
      path: {
        external_id: string;
      };
    };
    responses: {
      /** @description redirects to /t/{topic_id}.json */
      301: {
        content: never;
      };
    };
  };
  /** Creates an upload */
  createUpload: {
    requestBody?: {
      content: {
        "multipart/form-data": {
          /** @enum {string} */
          type: "avatar" | "profile_background" | "card_background" | "custom_emoji" | "composer";
          /** @description required if uploading an avatar */
          user_id?: number;
          /** @description Use this flag to return an id and url */
          synchronous?: boolean;
          /** Format: binary */
          file?: string;
        };
      };
    };
    responses: {
      /** @description file uploaded */
      200: {
        content: {
          "application/json": {
            id: number;
            url: string;
            original_filename: string;
            filesize: number;
            width: number;
            height: number;
            thumbnail_width: number;
            thumbnail_height: number;
            extension: string;
            short_url: string;
            short_path: string;
            retain_hours: string | null;
            human_filesize: string;
            dominant_color?: string | null;
          };
        };
      };
    };
  };
  /**
   * Initiates a direct external upload
   * @description Direct external uploads bypass the usual method of creating uploads
   * via the POST /uploads route, and upload directly to an external provider,
   * which by default is S3. This route begins the process, and will return
   * a unique identifier for the external upload as well as a presigned URL
   * which is where the file binary blob should be uploaded to.
   *
   * Once the upload is complete to the external service, you must call the
   * POST /complete-external-upload route using the unique identifier returned
   * by this route, which will create any required Upload record in the Discourse
   * database and also move file from its temporary location to the final
   * destination in the external storage service.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   */
  generatePresignedPut: {
    requestBody?: {
      content: {
        "application/json": {
          /** @enum {string} */
          type: "avatar" | "profile_background" | "card_background" | "custom_emoji" | "composer";
          /** @example IMG_2021.jpeg */
          file_name: string;
          /**
           * @description File size should be represented in bytes.
           * @example 4096
           */
          file_size: number;
          metadata?: {
            /**
             * @description The SHA1 checksum of the upload binary blob. Optionally
             * be provided and serves as an additional security check when
             * later processing the file in complete-external-upload endpoint.
             */
            "sha1-checksum"?: string;
          };
        };
      };
    };
    responses: {
      /** @description external upload initialized */
      200: {
        content: {
          "application/json": {
            /**
             * @description The path of the temporary file on the external storage
             * service.
             * @example temp/site/uploads/default/12345/67890.jpg
             */
            key?: string;
            /**
             * @description A presigned PUT URL which must be used to upload
             * the file binary blob to.
             * @example https://file-uploads.s3.us-west-2.amazonaws.com/temp/site/uploads/default/123/456.jpg?x-amz-acl=private&x-amz-meta-sha1-checksum=sha1&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=AAAAus-west-2%2Fs3%2Faws4_request&X-Amz-Date=20211221T011246Z&X-Amz-Expires=600&X-Amz-SignedHeaders=host&X-Amz-Signature=12345678
             */
            url?: string;
            /**
             * @description A map of headers that must be sent with the PUT request.
             * @example {
             *   "x-amz-acl": "private",
             *   "x-amz-meta-sha1-checksum": "sha1"
             * }
             */
            signed_headers?: Record<string, never>;
            /**
             * @description A unique string that identifies the external upload.
             * This must be stored and then sent in the /complete-external-upload
             * endpoint to complete the direct upload.
             * @example 66e86218-80d9-4bda-b4d5-2b6def968705
             */
            unique_identifier?: string;
          };
        };
      };
    };
  };
  /**
   * Completes a direct external upload
   * @description Completes an external upload initialized with /get-presigned-put. The
   * file will be moved from its temporary location in external storage to
   * a final destination in the S3 bucket. An Upload record will also be
   * created in the database in most cases.
   *
   * If a sha1-checksum was provided in the initial request it will also
   * be compared with the uploaded file in storage to make sure the same
   * file was uploaded. The file size will be compared for the same reason.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   */
  completeExternalUpload: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The unique identifier returned in the original /generate-presigned-put
           * request.
           * @example 66e86218-80d9-4bda-b4d5-2b6def968705
           */
          unique_identifier: string;
          /**
           * @description Optionally set this to true if the upload is for a
           * private message.
           * @example true
           */
          for_private_message?: string;
          /**
           * @description Optionally set this to true if the upload is for a
           * site setting.
           * @example true
           */
          for_site_setting?: string;
          /**
           * @description Optionally set this to true if the upload was pasted
           * into the upload area. This will convert PNG files to JPEG.
           * @example true
           */
          pasted?: string;
        };
      };
    };
    responses: {
      /** @description external upload initialized */
      200: {
        content: {
          "application/json": {
            id: number;
            url: string;
            original_filename: string;
            filesize: number;
            width: number;
            height: number;
            thumbnail_width: number;
            thumbnail_height: number;
            extension: string;
            short_url: string;
            short_path: string;
            retain_hours: string | null;
            human_filesize: string;
            dominant_color?: string | null;
          };
        };
      };
    };
  };
  /**
   * Creates a multipart external upload
   * @description Creates a multipart upload in the external storage provider, storing
   * a temporary reference to the external upload similar to /get-presigned-put.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   */
  createMultipartUpload: {
    requestBody?: {
      content: {
        "application/json": {
          /** @enum {string} */
          upload_type: "avatar" | "profile_background" | "card_background" | "custom_emoji" | "composer";
          /** @example IMG_2021.jpeg */
          file_name: string;
          /**
           * @description File size should be represented in bytes.
           * @example 4096
           */
          file_size: number;
          metadata?: {
            /**
             * @description The SHA1 checksum of the upload binary blob. Optionally
             * be provided and serves as an additional security check when
             * later processing the file in complete-external-upload endpoint.
             */
            "sha1-checksum"?: string;
          };
        };
      };
    };
    responses: {
      /** @description external upload initialized */
      200: {
        content: {
          "application/json": {
            /**
             * @description The path of the temporary file on the external storage
             * service.
             * @example temp/site/uploads/default/12345/67890.jpg
             */
            key: string;
            /**
             * @description The identifier of the multipart upload in the external
             * storage provider. This is the multipart upload_id in AWS S3.
             * @example 84x83tmxy398t3y._Q_z8CoJYVr69bE6D7f8J6Oo0434QquLFoYdGVerWFx9X5HDEI_TP_95c34n853495x35345394.d.ghQ
             */
            external_upload_identifier: string;
            /**
             * @description A unique string that identifies the external upload.
             * This must be stored and then sent in the /complete-multipart
             * and /batch-presign-multipart-parts endpoints.
             * @example 66e86218-80d9-4bda-b4d5-2b6def968705
             */
            unique_identifier: string;
          };
        };
      };
    };
  };
  /**
   * Generates batches of presigned URLs for multipart parts
   * @description Multipart uploads are uploaded in chunks or parts to individual presigned
   * URLs, similar to the one generated by /generate-presigned-put. The part
   * numbers provided must be between 1 and 10000. The total number of parts
   * will depend on the chunk size in bytes that you intend to use to upload
   * each chunk. For example a 12MB file may have 2 5MB chunks and a final
   * 2MB chunk, for part numbers 1, 2, and 3.
   *
   * This endpoint will return a presigned URL for each part number provided,
   * which you can then use to send PUT requests for the binary chunk corresponding
   * to that part. When the part is uploaded, the provider should return an
   * ETag for the part, and this should be stored along with the part number,
   * because this is needed to complete the multipart upload.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   */
  batchPresignMultipartParts: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The part numbers to generate the presigned URLs for,
           * must be between 1 and 10000.
           * @example [
           *   1,
           *   2,
           *   3
           * ]
           */
          part_numbers: unknown[];
          /**
           * @description The unique identifier returned in the original /create-multipart
           * request.
           * @example 66e86218-80d9-4bda-b4d5-2b6def968705
           */
          unique_identifier: string;
        };
      };
    };
    responses: {
      /** @description external upload initialized */
      200: {
        content: {
          "application/json": {
            /**
             * @description The presigned URLs for each part number, which has
             * the part numbers as keys.
             * @example {
             *   "1": "https://discourse-martin-uploads-test.s3.us-east-2.amazonaws.com/temp/uploads/default/123abc/123abc.jpg?partNumber=1&uploadId=123456abcd&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Credential=test&X-Amz-Date=20211222T012336Z&X-Amz-Expires=600&X-Amz-SignedHeaders=host&X-Amz-Signature=abc123"
             * }
             */
            presigned_urls: Record<string, never>;
          };
        };
      };
    };
  };
  /**
   * Abort multipart upload
   * @description This endpoint aborts the multipart upload initiated with /create-multipart.
   * This should be used when cancelling the upload. It does not matter if parts
   * were already uploaded into the external storage provider.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   */
  abortMultipart: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The identifier of the multipart upload in the external
           * storage provider. This is the multipart upload_id in AWS S3.
           * @example 84x83tmxy398t3y._Q_z8CoJYVr69bE6D7f8J6Oo0434QquLFoYdGVerWFx9X5HDEI_TP_95c34n853495x35345394.d.ghQ
           */
          external_upload_identifier: string;
        };
      };
    };
    responses: {
      /** @description external upload initialized */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success: string;
          };
        };
      };
    };
  };
  /**
   * Complete multipart upload
   * @description Completes the multipart upload in the external store, and copies the
   * file from its temporary location to its final location in the store.
   * All of the parts must have been uploaded to the external storage provider.
   * An Upload record will be completed in most cases once the file is copied
   * to its final location.
   *
   * You must have the correct permissions and CORS settings configured in your
   * external provider. We support AWS S3 as the default. See:
   *
   * https://meta.discourse.org/t/-/210469#s3-multipart-direct-uploads-4.
   *
   * An external file store must be set up and `enable_direct_s3_uploads` must
   * be set to true for this endpoint to function.
   */
  completeMultipart: {
    requestBody?: {
      content: {
        "application/json": {
          /**
           * @description The unique identifier returned in the original /create-multipart
           * request.
           * @example 66e86218-80d9-4bda-b4d5-2b6def968705
           */
          unique_identifier: string;
          /**
           * @description All of the part numbers and their corresponding ETags
           * that have been uploaded must be provided.
           * @example [
           *   {
           *     "part_number": 1,
           *     "etag": "0c376dcfcc2606f4335bbc732de93344"
           *   },
           *   {
           *     "part_number": 2,
           *     "etag": "09ert8cfcc2606f4335bbc732de91122"
           *   }
           * ]
           */
          parts: unknown[];
        };
      };
    };
    responses: {
      /** @description external upload initialized */
      200: {
        content: {
          "application/json": {
            id: number;
            url: string;
            original_filename: string;
            filesize: number;
            width: number;
            height: number;
            thumbnail_width: number;
            thumbnail_height: number;
            extension: string;
            short_url: string;
            short_path: string;
            retain_hours: string | null;
            human_filesize: string;
            dominant_color?: string | null;
          };
        };
      };
    };
  };
  /** List badges for a user */
  listUserBadges: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            badges?: ({
                id: number;
                name: string;
                description: string;
                grant_count: number;
                allow_title: boolean;
                multiple_grant: boolean;
                icon: string;
                image_url: string | null;
                listable: boolean;
                enabled: boolean;
                badge_grouping_id: number;
                system: boolean;
                slug: string;
                manually_grantable: boolean;
                badge_type_id: number;
              })[];
            badge_types?: {
                id: number;
                name: string;
                sort_order: number;
              }[];
            granted_bies?: ({
                id: number;
                username: string;
                name: string;
                avatar_template: string;
                flair_name: string | null;
                admin: boolean;
                moderator: boolean;
                trust_level: number;
              })[];
            user_badges: ({
                id: number;
                granted_at: string;
                grouping_position: number;
                is_favorite: string | null;
                can_favorite: boolean;
                badge_id: number;
                granted_by_id: number;
              })[];
          };
        };
      };
    };
  };
  /** Creates a user */
  createUser: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          name: string;
          email: string;
          password: string;
          username: string;
          /**
           * @description This param requires an api key in the request header
           * or it will be ignored
           */
          active?: boolean;
          approved?: boolean;
          "user_fields[1]"?: boolean;
          external_ids?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description user created */
      200: {
        content: {
          "application/json": {
            success: boolean;
            active: boolean;
            message: string;
            user_id?: number;
          };
        };
      };
    };
  };
  /** Get a single user by username */
  getUser: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        username: string;
      };
    };
    responses: {
      /** @description user with primary group response */
      200: {
        content: {
          "application/json": {
            user_badges: unknown[];
            user: {
              id: number;
              username: string;
              name: string;
              avatar_template: string;
              last_posted_at: string | null;
              last_seen_at: string | null;
              created_at: string;
              ignored: boolean;
              muted: boolean;
              can_ignore_user: boolean;
              can_ignore_users?: boolean;
              can_mute_user: boolean;
              can_mute_users?: boolean;
              can_send_private_messages: boolean;
              can_send_private_message_to_user: boolean;
              trust_level: number;
              moderator: boolean;
              admin: boolean;
              title: string | null;
              badge_count: number;
              second_factor_backup_enabled?: boolean;
              user_fields?: {
                1: string | null;
                2: string | null;
              };
              custom_fields: {
                first_name?: string | null;
              };
              time_read: number;
              recent_time_read: number;
              primary_group_id: number | null;
              primary_group_name: string | null;
              flair_group_id: number | null;
              flair_name: string | null;
              flair_url: string | null;
              flair_bg_color: string | null;
              flair_color: string | null;
              featured_topic: string | null;
              staged: boolean;
              can_edit: boolean;
              can_edit_username: boolean;
              can_edit_email: boolean;
              can_edit_name: boolean;
              uploaded_avatar_id: number | null;
              has_title_badges: boolean;
              pending_count: number;
              pending_posts_count?: number;
              profile_view_count: number;
              second_factor_enabled: boolean;
              can_upload_profile_header: boolean;
              can_upload_user_card_background: boolean;
              post_count: number;
              can_be_deleted: boolean;
              can_delete_all_posts: boolean;
              locale: string | null;
              muted_category_ids: unknown[];
              regular_category_ids: unknown[];
              watched_tags: unknown[];
              watching_first_post_tags: unknown[];
              tracked_tags: unknown[];
              muted_tags: unknown[];
              tracked_category_ids: unknown[];
              watched_category_ids: unknown[];
              watched_first_post_category_ids: unknown[];
              system_avatar_upload_id: string | null;
              system_avatar_template: string;
              muted_usernames: unknown[];
              ignored_usernames: unknown[];
              allowed_pm_usernames: unknown[];
              mailing_list_posts_per_day: number;
              can_change_bio: boolean;
              can_change_location: boolean;
              can_change_website: boolean;
              can_change_tracking_preferences: boolean;
              user_api_keys: string | null;
              user_passkeys?: unknown[];
              sidebar_tags?: unknown[];
              sidebar_category_ids?: unknown[];
              display_sidebar_tags?: boolean;
              can_pick_theme_with_custom_homepage?: boolean;
              user_auth_tokens: {
                  id: number;
                  client_ip: string;
                  location: string;
                  browser: string;
                  device: string;
                  os: string;
                  icon: string;
                  created_at: string;
                  seen_at: string;
                  is_active: boolean;
                }[];
              user_notification_schedule: {
                enabled: boolean;
                day_0_start_time: number;
                day_0_end_time: number;
                day_1_start_time: number;
                day_1_end_time: number;
                day_2_start_time: number;
                day_2_end_time: number;
                day_3_start_time: number;
                day_3_end_time: number;
                day_4_start_time: number;
                day_4_end_time: number;
                day_5_start_time: number;
                day_5_end_time: number;
                day_6_start_time: number;
                day_6_end_time: number;
              };
              use_logo_small_as_avatar: boolean;
              featured_user_badge_ids: unknown[];
              invited_by: string | null;
              groups: ({
                  id: number;
                  automatic: boolean;
                  name: string;
                  display_name: string;
                  user_count: number;
                  mentionable_level: number;
                  messageable_level: number;
                  visibility_level: number;
                  primary_group: boolean;
                  title: string | null;
                  grant_trust_level: string | null;
                  incoming_email: string | null;
                  has_messages: boolean;
                  flair_url: string | null;
                  flair_bg_color: string | null;
                  flair_color: string | null;
                  bio_raw: string | null;
                  bio_cooked: string | null;
                  bio_excerpt: string | null;
                  public_admission: boolean;
                  public_exit: boolean;
                  allow_membership_requests: boolean;
                  full_name: string | null;
                  default_notification_level: number;
                  membership_request_template: string | null;
                  members_visibility_level: number;
                  can_see_members: boolean;
                  can_admin_group: boolean;
                  publish_read_state: boolean;
                })[];
              group_users: {
                  group_id: number;
                  user_id: number;
                  notification_level: number;
                  owner?: boolean;
                }[];
              user_option: {
                user_id: number;
                mailing_list_mode: boolean;
                mailing_list_mode_frequency: number;
                email_digests: boolean;
                email_level: number;
                email_messages_level: number;
                external_links_in_new_tab: boolean;
                bookmark_auto_delete_preference?: number;
                color_scheme_id: string | null;
                dark_scheme_id: string | null;
                dynamic_favicon: boolean;
                enable_quoting: boolean;
                enable_defer: boolean;
                digest_after_minutes: number;
                automatically_unpin_topics: boolean;
                auto_track_topics_after_msecs: number;
                notification_level_when_replying: number;
                new_topic_duration_minutes: number;
                email_previous_replies: number;
                email_in_reply_to: boolean;
                like_notification_frequency: number;
                include_tl0_in_digests: boolean;
                theme_ids: unknown[];
                theme_key_seq: number;
                allow_private_messages: boolean;
                enable_allowed_pm_users: boolean;
                homepage_id: string | null;
                hide_profile_and_presence: boolean;
                text_size: string;
                text_size_seq: number;
                title_count_mode: string;
                timezone: string | null;
                skip_new_user_tips: boolean;
                default_calendar?: string;
                oldest_search_log_date?: string | null;
                sidebar_link_to_filtered_list?: boolean;
                sidebar_show_count_of_new_items?: boolean;
                watched_precedence_over_muted?: boolean | null;
                seen_popups?: unknown[] | null;
                topics_unread_when_closed: boolean;
              };
            };
          };
        };
      };
    };
  };
  /** Update a user */
  updateUser: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        username: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          name?: string;
          external_ids?: Record<string, never>;
        };
      };
    };
    responses: {
      /** @description user updated */
      200: {
        content: {
          "application/json": {
            success: string;
            user: Record<string, never>;
          };
        };
      };
    };
  };
  /** Get a user by external_id */
  getUserExternalId: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        external_id: string;
      };
    };
    responses: {
      /** @description user response */
      200: {
        content: {
          "application/json": {
            user_badges: unknown[];
            user: {
              id: number;
              username: string;
              name: string;
              avatar_template: string;
              last_posted_at: string | null;
              last_seen_at: string | null;
              created_at: string;
              ignored: boolean;
              muted: boolean;
              can_ignore_user: boolean;
              can_ignore_users?: boolean;
              can_mute_user: boolean;
              can_mute_users?: boolean;
              can_send_private_messages: boolean;
              can_send_private_message_to_user: boolean;
              trust_level: number;
              moderator: boolean;
              admin: boolean;
              title: string | null;
              badge_count: number;
              second_factor_backup_enabled?: boolean;
              user_fields?: {
                1: string | null;
                2: string | null;
              };
              custom_fields: {
                first_name?: string | null;
              };
              time_read: number;
              recent_time_read: number;
              primary_group_id: number | null;
              primary_group_name: string | null;
              flair_group_id: number | null;
              flair_name: string | null;
              flair_url: string | null;
              flair_bg_color: string | null;
              flair_color: string | null;
              featured_topic: string | null;
              staged: boolean;
              can_edit: boolean;
              can_edit_username: boolean;
              can_edit_email: boolean;
              can_edit_name: boolean;
              uploaded_avatar_id: number | null;
              has_title_badges: boolean;
              pending_count: number;
              pending_posts_count?: number;
              profile_view_count: number;
              second_factor_enabled: boolean;
              can_upload_profile_header: boolean;
              can_upload_user_card_background: boolean;
              post_count: number;
              can_be_deleted: boolean;
              can_delete_all_posts: boolean;
              locale: string | null;
              muted_category_ids: unknown[];
              regular_category_ids: unknown[];
              watched_tags: unknown[];
              watching_first_post_tags: unknown[];
              tracked_tags: unknown[];
              muted_tags: unknown[];
              tracked_category_ids: unknown[];
              watched_category_ids: unknown[];
              watched_first_post_category_ids: unknown[];
              system_avatar_upload_id: string | null;
              system_avatar_template: string;
              muted_usernames: unknown[];
              ignored_usernames: unknown[];
              allowed_pm_usernames: unknown[];
              mailing_list_posts_per_day: number;
              can_change_bio: boolean;
              can_change_location: boolean;
              can_change_website: boolean;
              can_change_tracking_preferences: boolean;
              user_api_keys: string | null;
              user_passkeys?: unknown[];
              sidebar_tags?: unknown[];
              sidebar_category_ids?: unknown[];
              display_sidebar_tags?: boolean;
              can_pick_theme_with_custom_homepage?: boolean;
              user_auth_tokens: {
                  id: number;
                  client_ip: string;
                  location: string;
                  browser: string;
                  device: string;
                  os: string;
                  icon: string;
                  created_at: string;
                  seen_at: string;
                  is_active: boolean;
                }[];
              user_notification_schedule: {
                enabled: boolean;
                day_0_start_time: number;
                day_0_end_time: number;
                day_1_start_time: number;
                day_1_end_time: number;
                day_2_start_time: number;
                day_2_end_time: number;
                day_3_start_time: number;
                day_3_end_time: number;
                day_4_start_time: number;
                day_4_end_time: number;
                day_5_start_time: number;
                day_5_end_time: number;
                day_6_start_time: number;
                day_6_end_time: number;
              };
              use_logo_small_as_avatar: boolean;
              featured_user_badge_ids: unknown[];
              invited_by: string | null;
              groups: ({
                  id: number;
                  automatic: boolean;
                  name: string;
                  display_name: string;
                  user_count: number;
                  mentionable_level: number;
                  messageable_level: number;
                  visibility_level: number;
                  primary_group: boolean;
                  title: string | null;
                  grant_trust_level: string | null;
                  incoming_email: string | null;
                  has_messages: boolean;
                  flair_url: string | null;
                  flair_bg_color: string | null;
                  flair_color: string | null;
                  bio_raw: string | null;
                  bio_cooked: string | null;
                  bio_excerpt: string | null;
                  public_admission: boolean;
                  public_exit: boolean;
                  allow_membership_requests: boolean;
                  full_name: string | null;
                  default_notification_level: number;
                  membership_request_template: string | null;
                  members_visibility_level: number;
                  can_see_members: boolean;
                  can_admin_group: boolean;
                  publish_read_state: boolean;
                })[];
              group_users: {
                  group_id: number;
                  user_id: number;
                  notification_level: number;
                  owner?: boolean;
                }[];
              user_option: {
                user_id: number;
                mailing_list_mode: boolean;
                mailing_list_mode_frequency: number;
                email_digests: boolean;
                email_level: number;
                email_messages_level: number;
                external_links_in_new_tab: boolean;
                bookmark_auto_delete_preference?: number;
                color_scheme_id: string | null;
                dark_scheme_id: string | null;
                dynamic_favicon: boolean;
                enable_quoting: boolean;
                enable_defer: boolean;
                digest_after_minutes: number;
                automatically_unpin_topics: boolean;
                auto_track_topics_after_msecs: number;
                notification_level_when_replying: number;
                new_topic_duration_minutes: number;
                email_previous_replies: number;
                email_in_reply_to: boolean;
                like_notification_frequency: number;
                include_tl0_in_digests: boolean;
                theme_ids: unknown[];
                theme_key_seq: number;
                allow_private_messages: boolean;
                enable_allowed_pm_users: boolean;
                homepage_id: string | null;
                hide_profile_and_presence: boolean;
                text_size: string;
                text_size_seq: number;
                title_count_mode: string;
                timezone: string | null;
                skip_new_user_tips: boolean;
                default_calendar?: string;
                oldest_search_log_date?: string | null;
                sidebar_link_to_filtered_list?: boolean;
                sidebar_show_count_of_new_items?: boolean;
                watched_precedence_over_muted?: boolean | null;
                seen_popups?: unknown[] | null;
                topics_unread_when_closed: boolean;
              };
            };
          };
        };
      };
    };
  };
  /** Get a user by identity provider external ID */
  getUserIdentiyProviderExternalId: {
    parameters: {
      header: {
        "Api-Key": string;
        "Api-Username": string;
      };
      path: {
        /**
         * @description Authentication provider name. Can be found in the provider callback
         * URL: `/auth/{provider}/callback`
         */
        provider: string;
        external_id: string;
      };
    };
    responses: {
      /** @description user response */
      200: {
        content: {
          "application/json": {
            user_badges: unknown[];
            user: {
              id: number;
              username: string;
              name: string;
              avatar_template: string;
              last_posted_at: string | null;
              last_seen_at: string | null;
              created_at: string;
              ignored: boolean;
              muted: boolean;
              can_ignore_user: boolean;
              can_ignore_users?: boolean;
              can_mute_user: boolean;
              can_mute_users?: boolean;
              can_send_private_messages: boolean;
              can_send_private_message_to_user: boolean;
              trust_level: number;
              moderator: boolean;
              admin: boolean;
              title: string | null;
              badge_count: number;
              second_factor_backup_enabled?: boolean;
              user_fields?: {
                1: string | null;
                2: string | null;
              };
              custom_fields: {
                first_name?: string | null;
              };
              time_read: number;
              recent_time_read: number;
              primary_group_id: number | null;
              primary_group_name: string | null;
              flair_group_id: number | null;
              flair_name: string | null;
              flair_url: string | null;
              flair_bg_color: string | null;
              flair_color: string | null;
              featured_topic: string | null;
              staged: boolean;
              can_edit: boolean;
              can_edit_username: boolean;
              can_edit_email: boolean;
              can_edit_name: boolean;
              uploaded_avatar_id: number | null;
              has_title_badges: boolean;
              pending_count: number;
              pending_posts_count?: number;
              profile_view_count: number;
              second_factor_enabled: boolean;
              can_upload_profile_header: boolean;
              can_upload_user_card_background: boolean;
              post_count: number;
              can_be_deleted: boolean;
              can_delete_all_posts: boolean;
              locale: string | null;
              muted_category_ids: unknown[];
              regular_category_ids: unknown[];
              watched_tags: unknown[];
              watching_first_post_tags: unknown[];
              tracked_tags: unknown[];
              muted_tags: unknown[];
              tracked_category_ids: unknown[];
              watched_category_ids: unknown[];
              watched_first_post_category_ids: unknown[];
              system_avatar_upload_id: string | null;
              system_avatar_template: string;
              muted_usernames: unknown[];
              ignored_usernames: unknown[];
              allowed_pm_usernames: unknown[];
              mailing_list_posts_per_day: number;
              can_change_bio: boolean;
              can_change_location: boolean;
              can_change_website: boolean;
              can_change_tracking_preferences: boolean;
              user_api_keys: string | null;
              user_passkeys?: unknown[];
              sidebar_tags?: unknown[];
              sidebar_category_ids?: unknown[];
              display_sidebar_tags?: boolean;
              can_pick_theme_with_custom_homepage?: boolean;
              user_auth_tokens: {
                  id: number;
                  client_ip: string;
                  location: string;
                  browser: string;
                  device: string;
                  os: string;
                  icon: string;
                  created_at: string;
                  seen_at: string;
                  is_active: boolean;
                }[];
              user_notification_schedule: {
                enabled: boolean;
                day_0_start_time: number;
                day_0_end_time: number;
                day_1_start_time: number;
                day_1_end_time: number;
                day_2_start_time: number;
                day_2_end_time: number;
                day_3_start_time: number;
                day_3_end_time: number;
                day_4_start_time: number;
                day_4_end_time: number;
                day_5_start_time: number;
                day_5_end_time: number;
                day_6_start_time: number;
                day_6_end_time: number;
              };
              use_logo_small_as_avatar: boolean;
              featured_user_badge_ids: unknown[];
              invited_by: string | null;
              groups: ({
                  id: number;
                  automatic: boolean;
                  name: string;
                  display_name: string;
                  user_count: number;
                  mentionable_level: number;
                  messageable_level: number;
                  visibility_level: number;
                  primary_group: boolean;
                  title: string | null;
                  grant_trust_level: string | null;
                  incoming_email: string | null;
                  has_messages: boolean;
                  flair_url: string | null;
                  flair_bg_color: string | null;
                  flair_color: string | null;
                  bio_raw: string | null;
                  bio_cooked: string | null;
                  bio_excerpt: string | null;
                  public_admission: boolean;
                  public_exit: boolean;
                  allow_membership_requests: boolean;
                  full_name: string | null;
                  default_notification_level: number;
                  membership_request_template: string | null;
                  members_visibility_level: number;
                  can_see_members: boolean;
                  can_admin_group: boolean;
                  publish_read_state: boolean;
                })[];
              group_users: {
                  group_id: number;
                  user_id: number;
                  notification_level: number;
                  owner?: boolean;
                }[];
              user_option: {
                user_id: number;
                mailing_list_mode: boolean;
                mailing_list_mode_frequency: number;
                email_digests: boolean;
                email_level: number;
                email_messages_level: number;
                external_links_in_new_tab: boolean;
                bookmark_auto_delete_preference?: number;
                color_scheme_id: string | null;
                dark_scheme_id: string | null;
                dynamic_favicon: boolean;
                enable_quoting: boolean;
                enable_defer: boolean;
                digest_after_minutes: number;
                automatically_unpin_topics: boolean;
                auto_track_topics_after_msecs: number;
                notification_level_when_replying: number;
                new_topic_duration_minutes: number;
                email_previous_replies: number;
                email_in_reply_to: boolean;
                like_notification_frequency: number;
                include_tl0_in_digests: boolean;
                theme_ids: unknown[];
                theme_key_seq: number;
                allow_private_messages: boolean;
                enable_allowed_pm_users: boolean;
                homepage_id: string | null;
                hide_profile_and_presence: boolean;
                text_size: string;
                text_size_seq: number;
                title_count_mode: string;
                timezone: string | null;
                skip_new_user_tips: boolean;
                default_calendar?: string;
                oldest_search_log_date?: string | null;
                sidebar_link_to_filtered_list?: boolean;
                sidebar_show_count_of_new_items?: boolean;
                watched_precedence_over_muted?: boolean | null;
                seen_popups?: unknown[] | null;
                topics_unread_when_closed: boolean;
              };
            };
          };
        };
      };
    };
  };
  /** Update avatar */
  updateAvatar: {
    parameters: {
      path: {
        username: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          upload_id: number;
          /** @enum {string} */
          type: "uploaded" | "custom" | "gravatar" | "system";
        };
      };
    };
    responses: {
      /** @description avatar updated */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success: string;
          };
        };
      };
    };
  };
  /** Update email */
  updateEmail: {
    parameters: {
      path: {
        username: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** Format: email */
          email: string;
        };
      };
    };
    responses: {
      /** @description email updated */
      200: {
        content: never;
      };
    };
  };
  /** Update username */
  updateUsername: {
    parameters: {
      path: {
        username: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          new_username: string;
        };
      };
    };
    responses: {
      /** @description username updated */
      200: {
        content: never;
      };
    };
  };
  /** Get a public list of users */
  listUsersPublic: {
    parameters: {
      query: {
        period: "daily" | "weekly" | "monthly" | "quarterly" | "yearly" | "all";
        order: "likes_received" | "likes_given" | "topic_count" | "post_count" | "topics_entered" | "posts_read" | "days_visited";
        asc?: "true";
        page?: number;
      };
    };
    responses: {
      /** @description directory items response */
      200: {
        content: {
          "application/json": {
            directory_items: ({
                id: number;
                likes_received: number;
                likes_given: number;
                topics_entered: number;
                topic_count: number;
                post_count: number;
                posts_read: number;
                days_visited: number;
                user: {
                  id: number;
                  username: string;
                  name: string | null;
                  avatar_template: string;
                  title: string | null;
                };
              })[];
            meta: {
              last_updated_at: string | null;
              total_rows_directory_items: number;
              load_more_directory_items: string;
            };
          };
        };
      };
    };
  };
  /** Get a user by id */
  adminGetUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            id: number;
            username: string;
            name: string | null;
            avatar_template: string;
            active: boolean;
            admin: boolean;
            moderator: boolean;
            last_seen_at: string | null;
            last_emailed_at: string | null;
            created_at: string;
            last_seen_age: number | null;
            last_emailed_age: number | null;
            created_at_age: number | null;
            trust_level: number;
            manual_locked_trust_level: string | null;
            title: string | null;
            time_read: number;
            staged: boolean;
            days_visited: number;
            posts_read_count: number;
            topics_entered: number;
            post_count: number;
            associated_accounts?: unknown[];
            can_send_activation_email: boolean;
            can_activate: boolean;
            can_deactivate: boolean;
            ip_address: string;
            registration_ip_address: string | null;
            can_grant_admin: boolean;
            can_revoke_admin: boolean;
            can_grant_moderation: boolean;
            can_revoke_moderation: boolean;
            can_impersonate: boolean;
            like_count: number;
            like_given_count: number;
            topic_count: number;
            flags_given_count: number;
            flags_received_count: number;
            private_topics_count: number;
            can_delete_all_posts: boolean;
            can_be_deleted: boolean;
            can_be_anonymized: boolean;
            can_be_merged: boolean;
            full_suspend_reason: string | null;
            silence_reason: string | null;
            post_edits_count?: number | null;
            primary_group_id: number | null;
            badge_count: number;
            warnings_received_count: number;
            bounce_score: number | null;
            reset_bounce_score_after: string | null;
            can_view_action_logs: boolean;
            can_disable_second_factor: boolean;
            can_delete_sso_record: boolean;
            api_key_count: number;
            similar_users_count?: number;
            single_sign_on_record: string | null;
            approved_by: {
              id: number;
              username: string;
              name: string;
              avatar_template: string;
            } | null;
            suspended_by: string | null;
            silenced_by: string | null;
            penalty_counts?: {
              silenced: number;
              suspended: number;
            };
            next_penalty?: string;
            tl3_requirements?: {
              time_period: number;
              requirements_met: boolean;
              requirements_lost: boolean;
              trust_level_locked: boolean;
              on_grace_period: boolean;
              days_visited: number;
              min_days_visited: number;
              num_topics_replied_to: number;
              min_topics_replied_to: number;
              topics_viewed: number;
              min_topics_viewed: number;
              posts_read: number;
              min_posts_read: number;
              topics_viewed_all_time: number;
              min_topics_viewed_all_time: number;
              posts_read_all_time: number;
              min_posts_read_all_time: number;
              num_flagged_posts: number;
              max_flagged_posts: number;
              num_flagged_by_users: number;
              max_flagged_by_users: number;
              num_likes_given: number;
              min_likes_given: number;
              num_likes_received: number;
              min_likes_received: number;
              num_likes_received_days: number;
              min_likes_received_days: number;
              num_likes_received_users: number;
              min_likes_received_users: number;
              penalty_counts: {
                silenced: number;
                suspended: number;
                total: number;
              };
            };
            groups: ({
                id: number;
                automatic: boolean;
                name: string;
                display_name: string;
                user_count: number;
                mentionable_level: number;
                messageable_level: number;
                visibility_level: number;
                primary_group: boolean;
                title: string | null;
                grant_trust_level: string | null;
                incoming_email: string | null;
                has_messages: boolean;
                flair_url: string | null;
                flair_bg_color: string | null;
                flair_color: string | null;
                flair_group_id?: number | null;
                bio_raw: string | null;
                bio_cooked: string | null;
                bio_excerpt: string | null;
                public_admission: boolean;
                public_exit: boolean;
                allow_membership_requests: boolean;
                full_name: string | null;
                default_notification_level: number;
                membership_request_template: string | null;
                members_visibility_level: number;
                can_see_members: boolean;
                can_admin_group: boolean;
                publish_read_state: boolean;
              })[];
            external_ids: Record<string, never>;
          };
        };
      };
    };
  };
  /** Delete a user */
  deleteUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          delete_posts?: boolean;
          block_email?: boolean;
          block_urls?: boolean;
          block_ip?: boolean;
        };
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            deleted: boolean;
          };
        };
      };
    };
  };
  /** Activate a user */
  activateUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success: string;
          };
        };
      };
    };
  };
  /** Deactivate a user */
  deactivateUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success: string;
          };
        };
      };
    };
  };
  /** Suspend a user */
  suspendUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @example 2121-02-22 */
          suspend_until: string;
          reason: string;
          /** @description Will send an email with this message when present */
          message?: string;
          /** @example delete */
          post_action?: string;
        };
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            suspension: {
              suspend_reason: string;
              full_suspend_reason: string;
              suspended_till: string;
              suspended_at: string;
              suspended_by: {
                id: number;
                username: string;
                name: string;
                avatar_template: string;
              };
            };
          };
        };
      };
    };
  };
  /** Silence a user */
  silenceUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          /** @example 2022-06-01T08:00:00.000Z */
          silenced_till: string;
          reason: string;
          /** @description Will send an email with this message when present */
          message?: string;
          /** @example delete */
          post_action?: string;
        };
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            silence: {
              silenced: boolean;
              silence_reason: string;
              silenced_till: string;
              silenced_at: string;
              silenced_by: {
                id: number;
                username: string;
                name: string;
                avatar_template: string;
              };
            };
          };
        };
      };
    };
  };
  /** Anonymize a user */
  anonymizeUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            success: string;
            username: string;
          };
        };
      };
    };
  };
  /** Log a user out */
  logOutUser: {
    parameters: {
      path: {
        id: number;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            /** @example OK */
            success: string;
          };
        };
      };
    };
  };
  /** Refresh gravatar */
  refreshGravatar: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            gravatar_upload_id: number | null;
            gravatar_avatar_template: string | null;
          };
        };
      };
    };
  };
  /** Get a list of users */
  adminListUsers: {
    parameters: {
      query?: {
        order?: "created" | "last_emailed" | "seen" | "username" | "email" | "trust_level" | "days_visited" | "posts_read" | "topics_viewed" | "posts" | "read_time";
        asc?: "true";
        page?: number;
        /**
         * @description Include user email addresses in response. These requests will
         * be logged in the staff action logs.
         */
        show_emails?: boolean;
        /** @description Include user stats information */
        stats?: boolean;
        /** @description Filter to the user with this email address */
        email?: string;
        /** @description Filter to users with this IP address */
        ip?: string;
      };
      path: {
        flag: "active" | "new" | "staff" | "suspended" | "blocked" | "suspect";
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": ({
              id: number;
              username: string;
              name: string | null;
              avatar_template: string;
              email?: string;
              secondary_emails?: unknown[];
              active: boolean;
              admin: boolean;
              moderator: boolean;
              last_seen_at: string | null;
              last_emailed_at: string | null;
              created_at: string;
              last_seen_age: number | null;
              last_emailed_age: number | null;
              created_at_age: number | null;
              trust_level: number;
              manual_locked_trust_level: string | null;
              title: string | null;
              time_read: number;
              staged: boolean;
              days_visited: number;
              posts_read_count: number;
              topics_entered: number;
              post_count: number;
            })[];
        };
      };
    };
  };
  /** Get a list of user actions */
  listUserActions: {
    parameters: {
      query: {
        offset: number;
        username: string;
        filter: string;
      };
    };
    responses: {
      /** @description response */
      200: {
        content: {
          "application/json": {
            user_actions: ({
                excerpt: string;
                action_type: number;
                created_at: string;
                avatar_template: string;
                acting_avatar_template: string;
                slug: string;
                topic_id: number;
                target_user_id: number;
                target_name: string | null;
                target_username: string;
                post_number: number;
                post_id: string | null;
                username: string;
                name: string | null;
                user_id: number;
                acting_username: string;
                acting_name: string | null;
                acting_user_id: number;
                title: string;
                deleted: boolean;
                hidden: string | null;
                post_type: string | null;
                action_code: string | null;
                category_id: number;
                closed: boolean;
                archived: boolean;
              })[];
          };
        };
      };
    };
  };
  /** Send password reset email */
  sendPasswordResetEmail: {
    requestBody?: {
      content: {
        "application/json": {
          login: string;
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            success: string;
            user_found: boolean;
          };
        };
      };
    };
  };
  /** Change password */
  changePassword: {
    parameters: {
      path: {
        token: string;
      };
    };
    requestBody?: {
      content: {
        "application/json": {
          username: string;
          password: string;
        };
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: never;
      };
    };
  };
  /** Get email addresses belonging to a user */
  getUserEmails: {
    parameters: {
      path: {
        username: string;
      };
    };
    responses: {
      /** @description success response */
      200: {
        content: {
          "application/json": {
            email: string;
            secondary_emails: unknown[];
            unconfirmed_emails: unknown[];
            associated_accounts: unknown[];
          };
        };
      };
    };
  };
}
